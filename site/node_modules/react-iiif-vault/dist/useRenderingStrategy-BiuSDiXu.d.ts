import { ChoiceDescription, Paintables, SupportedTarget, ComplexChoice } from '@iiif/helpers';
import { ImageService, ExternalWebResource, InternationalString } from '@iiif/presentation-3';
import { AnnotationNormalized, AnnotationPageNormalized, CanvasNormalized } from '@iiif/presentation-3-normalized';
import { BoxSelector, TemporalBoxSelector, TemporalSelector } from '@iiif/helpers/annotation-targets';
import { Emitter } from 'mitt';

type ImageWithOptionalService = {
    id: string;
    annotationId: string;
    annotation: AnnotationNormalized;
    type: 'Image';
    service?: ImageService;
    width?: number;
    height?: number;
    sizes?: Array<{
        width: number;
        height: number;
    }>;
    target: BoxSelector | TemporalBoxSelector;
    selector?: BoxSelector;
};
type SingleAudio = {
    type: 'Sound';
    annotationId: string;
    annotation: AnnotationNormalized;
    url: string;
    format: string;
    duration: number;
    target: TemporalSelector;
    /**
     * Which part of this audio should be used (cropping).
     */
    selector: TemporalSelector;
};
type SingleYouTubeVideo = {
    type: 'VideoYouTube';
    annotationId: string;
    annotation: AnnotationNormalized;
    url: string;
    youTubeId: string;
    duration: number;
    target: TemporalSelector | TemporalBoxSelector;
    selector: TemporalSelector | TemporalBoxSelector;
};
type SingleVideo = {
    type: 'Video';
    annotationId: string;
    annotation: AnnotationNormalized;
    url: string;
    format: string;
    duration: number;
    /**
     * Where on the canvas should this section of video be painted.
     */
    target: TemporalSelector | TemporalBoxSelector;
    /**
     * Which part of this video should be painted.
     */
    selector: TemporalSelector | TemporalBoxSelector;
};
type AudioSequence = {
    type: 'SoundSequence';
    items: SingleAudio[];
};
type VideoSequence = {
    type: 'VideoSequence';
    items: SingleVideo[];
};
type AnnotationPageDescription = {
    pages: AnnotationPageNormalized[];
};

type ImageServiceLoaderType = (imageService: any | undefined, { height, width }: {
    height: number;
    width: number;
}) => ImageService | undefined;
declare function useLoadImageService(): readonly [ImageServiceLoaderType, Record<string, {
    status: "error" | "loading" | "done";
    service: ImageService | null;
    error?: boolean | undefined;
    errorMesage?: string | undefined;
    real?: boolean | undefined;
}>];

type SingleImageStrategy = {
    type: 'images';
    image: ImageWithOptionalService;
    images: Array<ImageWithOptionalService>;
    choice?: ChoiceDescription;
    annotations?: AnnotationPageDescription;
};
declare function getImageStrategy(canvas: CanvasNormalized, paintables: Paintables, loadImageService: ImageServiceLoaderType): SingleImageStrategy | UnknownStrategy;

type Single3DModelStrategy = {
    type: '3d-model';
    model: ExternalWebResource;
    choice?: ChoiceDescription;
    annotations?: AnnotationPageDescription;
    annotation: AnnotationNormalized;
    annotationId: string;
};
declare function get3dStrategy(canvas: CanvasNormalized, paintables: Paintables): RenderingStrategy;

type TextualContentStrategy = {
    type: 'textual-content';
    items: TextContent[];
    choice?: ChoiceDescription;
    annotations?: AnnotationPageDescription;
};
type TextContent = {
    type: 'Text';
    text: InternationalString;
    target: SupportedTarget | null;
    annotationId: string;
    annotation: AnnotationNormalized;
};
declare function getTextualContentStrategy(canvas: CanvasNormalized, paintables: Paintables): RenderingStrategy;

type MediaStrategy = {
    type: 'media';
    media: SingleAudio | SingleVideo | AudioSequence | VideoSequence | SingleYouTubeVideo;
    choice?: ChoiceDescription;
    annotations?: AnnotationPageDescription;
    captions?: Array<{
        id: string;
        type: string;
        format: string;
        label?: InternationalString;
        language?: string;
    }>;
};
type ComplexTimelineStrategy = {
    type: 'complex-timeline';
    items: Array<SingleImageStrategy['image'] | SingleAudio | SingleVideo | SingleYouTubeVideo | TextContent>;
    keyframes: TimelineKeyframe[];
    duration: number;
    choice?: ChoiceDescription;
    annotations?: AnnotationPageDescription;
};
interface TimelineKeyframe {
    id: string;
    type: 'enter' | 'exit' | 'change';
    resourceType: 'image' | 'audio' | 'video' | 'text';
    timeDelta?: number;
    isPrime?: boolean;
    time: number;
}
type EmptyStrategy = {
    type: 'empty';
    image: null;
    images: [];
    height: number;
    width: number;
    annotations?: AnnotationPageDescription;
};
type UnknownStrategy = {
    type: 'unknown';
    reason?: string;
    annotations?: AnnotationPageDescription;
};
type RenderingStrategy = SingleImageStrategy | MediaStrategy | ComplexTimelineStrategy | Single3DModelStrategy | TextualContentStrategy | UnknownStrategy | EmptyStrategy;

type StrategyActions = {
    makeChoice: (id: string, options?: {
        deselectOthers?: boolean;
        deselect?: boolean;
    }) => void;
};
type UseRenderingStrategy = [RenderingStrategy, StrategyActions];
type ChoiceEvents = {
    'choice-change': {
        choice: ComplexChoice;
        partOf: {
            canvasId?: string;
            manifestId?: string;
        };
    };
    'make-choice': {
        choiceId: string;
        deselectOthers?: boolean;
        deselect?: boolean;
    };
};
type UseRenderingStrategyOptions = {
    strategies?: Array<RenderingStrategy['type']>;
    annotationPageManagerId?: string;
    enableSingleAnnotation?: boolean;
    defaultChoices?: string[];
    emitter?: Emitter<ChoiceEvents>;
};
declare function useRenderingStrategy(options?: UseRenderingStrategyOptions): UseRenderingStrategy;

export { type AudioSequence as A, type ComplexTimelineStrategy as C, type EmptyStrategy as E, type ImageWithOptionalService as I, type MediaStrategy as M, type RenderingStrategy as R, type SingleAudio as S, type TimelineKeyframe as T, type UnknownStrategy as U, type VideoSequence as V, type SingleVideo as a, type StrategyActions as b, type SingleImageStrategy as c, type ImageServiceLoaderType as d, type SingleYouTubeVideo as e, type AnnotationPageDescription as f, getImageStrategy as g, type TextualContentStrategy as h, type TextContent as i, getTextualContentStrategy as j, type Single3DModelStrategy as k, get3dStrategy as l, type UseRenderingStrategy as m, type ChoiceEvents as n, type UseRenderingStrategyOptions as o, useRenderingStrategy as p, useLoadImageService as u };
