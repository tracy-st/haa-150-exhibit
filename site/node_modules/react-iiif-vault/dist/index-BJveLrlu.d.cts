import React__default, { ReactNode, FC, ComponentType, RefObject, ForwardRefExoticComponent, RefAttributes } from 'react';
import * as react_jsx_runtime from 'react/jsx-runtime';
import { AtlasProps, Preset, BoxStyle, ViewerMode } from '@atlas-viewer/atlas';
import { AnnotationPage, Reference } from '@iiif/presentation-3';
import { AnnotationPageNormalized, CanvasNormalized } from '@iiif/presentation-3-normalized';
import { S as SingleAudio, a as SingleVideo, M as MediaStrategy, b as StrategyActions, c as SingleImageStrategy, E as EmptyStrategy, C as ComplexTimelineStrategy, R as RenderingStrategy, I as ImageWithOptionalService } from './useRenderingStrategy-BiuSDiXu.cjs';
import { ChoiceDescription, ImageCandidate, BoxSelector } from '@iiif/helpers';
import { Vault } from '@iiif/helpers/vault';

declare function Viewer({ children, errorFallback, outerContainerProps, worldScale: _worldScale, ...props }: AtlasProps & {
    height?: number | string;
    width?: number | string;
    resizeHash?: number;
    containerProps?: any;
    outerContainerProps?: any;
    aspectRatio?: number;
    errorFallback?: any;
    renderPreset?: Preset;
    worldScale?: number;
} & {
    children: ReactNode;
}): react_jsx_runtime.JSX.Element;

declare const RenderAnnotation: FC<{
    id: string;
    className?: string;
    style?: BoxStyle;
    interactive?: boolean;
}>;

declare const RenderAnnotationPage: FC<{
    page: AnnotationPage | AnnotationPageNormalized;
    className?: string;
}>;

interface AudioComponentProps {
    media: SingleAudio;
    startTime?: number | null;
    children: ReactNode;
}
declare function AudioHTML({ media, startTime, children }: AudioComponentProps): react_jsx_runtime.JSX.Element;
declare function Audio({ media, mediaControlsDeps, audioCopmonent, children, }: {
    media: SingleAudio;
    mediaControlsDeps?: any[];
    children: ReactNode;
    audioCopmonent?: ComponentType<AudioComponentProps>;
}): null;

interface VideoComponentProps {
    element: RefObject<HTMLVideoElement>;
    media: SingleVideo;
    playPause: () => void;
    canvas: CanvasNormalized;
    poster?: string;
    startTime?: number;
    captions?: MediaStrategy['captions'];
}
declare function VideoHTML({ element, media, startTime, playPause, poster, }: VideoComponentProps): react_jsx_runtime.JSX.Element;
declare function Video({ media, mediaControlsDeps, children, videoComponent, captions, }: {
    media: SingleVideo;
    mediaControlsDeps?: any[];
    children: ReactNode;
    posterCanvasId?: string;
    videoComponent?: ComponentType<VideoComponentProps>;
    captions?: MediaStrategy['captions'];
}): null;

type CanvasProps = {
    x?: number;
    y?: number;
    onCreated?: any;
    onChoiceChange?: (choice?: ChoiceDescription) => void;
    registerActions?: (actions: StrategyActions) => void;
    defaultChoices?: Array<{
        id: string;
        opacity?: number;
    }>;
    isStatic?: boolean;
    keepCanvasScale?: boolean;
    children?: ReactNode;
    renderViewerControls?: (strategy: SingleImageStrategy | EmptyStrategy) => ReactNode;
    viewControlsDeps?: any[];
    renderMediaControls?: (strategy: MediaStrategy) => ReactNode;
    renderComplexTimelineControls?: (strategy: ComplexTimelineStrategy) => ReactNode;
    complexTimelineControlsDeps?: any[];
    mediaControlsDeps?: any[];
    strategies?: Array<RenderingStrategy['type']>;
    backgroundStyle?: BoxStyle;
    alwaysShowBackground?: boolean;
    enableSizes?: boolean;
    enableYouTube?: boolean;
    ignoreSize?: boolean;
    throwOnUnknown?: boolean;
    onClickPaintingAnnotation?: (id: string, image: ImageWithOptionalService, e: any) => void;
    components?: {
        Video?: React__default.ComponentType<VideoComponentProps>;
        Audio?: React__default.ComponentType<AudioComponentProps>;
    };
};
declare function RenderCanvas({ x, y, onChoiceChange, registerActions, defaultChoices, isStatic, renderViewerControls, renderMediaControls, renderComplexTimelineControls, complexTimelineControlsDeps, viewControlsDeps, mediaControlsDeps, strategies, throwOnUnknown, backgroundStyle, alwaysShowBackground, keepCanvasScale, enableSizes, enableYouTube, onClickPaintingAnnotation, components, children, }: CanvasProps): react_jsx_runtime.JSX.Element;

declare function RenderImage({ id, image, thumbnail, isStatic, x, y, children, selector, onClick, enableSizes, }: {
    id: string;
    image: ImageWithOptionalService;
    thumbnail?: ImageCandidate;
    isStatic?: boolean;
    enableSizes?: boolean;
    selector?: BoxSelector;
    x?: number;
    y?: number;
    children?: ReactNode;
    onClick?: (e: any) => void;
}): react_jsx_runtime.JSX.Element;

declare function CanvasBackground({ style }: {
    style?: BoxStyle;
}): react_jsx_runtime.JSX.Element | null;

type SimpleViewerContext = {
    items: Reference<'Canvas'>[];
    sequence: number[][];
    hasNext: boolean;
    hasPrevious: boolean;
    setSequenceIndex: (newId: number) => void;
    setCurrentCanvasId: (newId: string) => void;
    setCurrentCanvasIndex: (newId: number) => void;
    currentSequenceIndex: number;
    nextCanvas: () => void;
    previousCanvas: () => void;
};
type SimpleViewerProps = {
    vault?: Vault;
    manifest: string;
    pagingEnabled?: boolean;
    children: ReactNode;
    startCanvas?: string;
    rangeId?: string;
};
type SimpleViewerReducerState = {
    sequence: number[][];
    availableCanvases: Reference<'Canvas'>[];
    visibleCanvases: Reference<'Canvas'>[];
    currentCanvas: string | null;
    isPaged: boolean;
    rangeId: string | null;
};
interface SimpleViewerActions {
    setCurrentCanvasId(newId: string): void;
    setCurrentCanvasIndex(newId: number): void;
    nextCanvas(): void;
    previousCanvas(): void;
    setCurrentRange(newId: string): void;
    clearRange(): void;
    setPagingEnabled(isEnabled: boolean): void;
}
type SimpleViewerActionsType = {
    [T in keyof SimpleViewerActions]: {
        type: T;
        payload: Parameters<SimpleViewerActions[T]>[0];
    };
}[keyof SimpleViewerActions];

declare function ModelHTML({ model }: {
    model: any;
}): react_jsx_runtime.JSX.Element;
declare function Model({ model, name }: {
    model: any;
    name?: string;
}): null;

interface PlaceholderCanvasProps {
    renderViewerControls?: (strategy: SingleImageStrategy | EmptyStrategy) => ReactNode;
}
declare function PlaceholderCanvas(props: PlaceholderCanvasProps): react_jsx_runtime.JSX.Element | null;

interface CanvasPanelProps {
    manifest: string;
    startCanvas?: string;
    rangeId?: string;
    pagingEnabled?: boolean;
    header?: ReactNode;
    children?: ReactNode;
    mode?: ViewerMode;
    reuseAtlas?: boolean;
    runtimeOptions?: any;
    renderPreset?: any;
    height?: number;
    spacing?: number;
    components?: {
        ViewerControls?: FC;
        MediaControls?: FC;
        ComplexTimelineControls?: FC;
    };
    canvasProps?: Omit<Partial<CanvasProps>, 'x'>;
    annotations?: ReactNode;
}
type CanvasPanelType = ForwardRefExoticComponent<CanvasPanelProps & RefAttributes<SimpleViewerContext>> & {
    RenderImage: typeof RenderImage;
    RenderCanvas: typeof RenderCanvas;
    RenderAnnotationPage: typeof RenderAnnotationPage;
    RenderAnnotation: typeof RenderAnnotation;
    Viewer: typeof Viewer;
    CanvasBackground: typeof CanvasBackground;
    Audio: typeof Audio;
    Video: typeof Video;
    Model: typeof Model;
    AudioHTML: typeof AudioHTML;
    VideoHTML: typeof VideoHTML;
    ModelHTML: typeof ModelHTML;
    PlaceholderCanvas: typeof PlaceholderCanvas;
};
declare const CanvasPanel: CanvasPanelType;

export { type AudioComponentProps as A, CanvasPanel as C, type SimpleViewerContext as S, type VideoComponentProps as V, type SimpleViewerProps as a, type SimpleViewerReducerState as b, type SimpleViewerActions as c, type SimpleViewerActionsType as d };
