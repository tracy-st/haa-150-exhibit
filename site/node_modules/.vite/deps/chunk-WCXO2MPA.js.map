{
  "version": 3,
  "sources": ["../../@iiif/helpers/src/compat.ts", "../../@iiif/helpers/src/painting-annotations/parse-specific-resource.ts", "../../@iiif/helpers/src/painting-annotations/helper.ts"],
  "sourcesContent": ["export type CompatVault = {\n  get: import('./vault').Vault['get'];\n  setMetaValue: import('./vault').Vault['setMetaValue'];\n  getResourceMeta: import('./vault').Vault['getResourceMeta'];\n  load: import('./vault').Vault['load'];\n  requestStatus: import('./vault').Vault['requestStatus'];\n};\n\nconst metaState: any = {};\nexport const compatVault: CompatVault = {\n  get(nonRef: any) {\n    return nonRef;\n  },\n  setMetaValue([id, meta, key], value) {\n    const oldValue = compatVault.getResourceMeta(id, meta);\n    const oldValueItem = oldValue ? oldValue[key] : undefined;\n    const newValue = typeof value === 'function' ? (value as any)(oldValueItem) : value;\n    metaState[id] = {\n      ...(metaState[id] || {}),\n      [meta]: {\n        ...((metaState[id] || {})[meta] || {}),\n        [key]: newValue,\n      },\n    };\n  },\n  getResourceMeta: ((resource: any, metaKey?: any) => {\n    const resourceMeta = metaState[resource as any] as any;\n\n    if (!resourceMeta) {\n      return undefined;\n    }\n    if (!metaKey) {\n      return resourceMeta;\n    }\n\n    return resourceMeta[metaKey];\n  }) as any,\n  async load(id: string | { type: any; id: string }) {\n    const idToLoad = typeof id === 'string' ? id : id.id;\n\n    // @todo this could do an upgrade..\n    return fetch(idToLoad).then((response) => response.json());\n  },\n  requestStatus(id: string) {\n    // Never any request status in this context.\n    return undefined;\n  },\n};\n", "import { ChoiceBody, ContentResource } from \"@iiif/presentation-3\";\n\nexport function parseSpecificResource(resource: ContentResource): [ContentResource | ChoiceBody, { selector?: any }] {\n  if (resource.type === 'SpecificResource') {\n    return [resource.source, { selector: resource.selector }];\n  }\n\n  return [resource, { selector: null }];\n}\n", "import { ContentResource, IIIFExternalWebResource } from '@iiif/presentation-3';\nimport { AnnotationNormalized, CanvasNormalized } from '@iiif/presentation-3-normalized';\nimport { ComplexChoice, Paintables } from './types';\nimport { parseSpecificResource } from './parse-specific-resource';\nimport { compatVault, CompatVault } from '../compat';\n\nexport function createPaintingAnnotationsHelper(vault: CompatVault = compatVault) {\n  function getAllPaintingAnnotations(canvasOrId: string | CanvasNormalized | undefined | null) {\n    const canvas = canvasOrId\n      ? typeof canvasOrId === 'string'\n        ? vault.get<CanvasNormalized>(canvasOrId)\n        : canvasOrId\n      : null;\n\n    if (!canvas) {\n      return [];\n    }\n    const annotationPages = vault.get(canvas.items, { parent: canvas });\n    const flatAnnotations: AnnotationNormalized[] = [];\n    for (const page of annotationPages) {\n      flatAnnotations.push(...vault.get(page.items, { parent: page }));\n    }\n    return flatAnnotations;\n  }\n\n  function getPaintables(\n    paintingAnnotationsOrCanvas: string | CanvasNormalized | AnnotationNormalized[],\n    enabledChoices: string[] = []\n  ): Paintables {\n    const paintingAnnotations = Array.isArray(paintingAnnotationsOrCanvas)\n      ? paintingAnnotationsOrCanvas\n      : getAllPaintingAnnotations(paintingAnnotationsOrCanvas);\n\n    const types: string[] = [];\n    let choices: ComplexChoice = {\n      items: [],\n      type: 'complex-choice',\n    };\n    const items: Paintables['items'] = [];\n\n    for (const annotation of paintingAnnotations) {\n      if (annotation.type !== 'Annotation') {\n        throw new Error(`getPaintables() accept either a canvas or list of annotations`);\n      }\n\n      const references = Array.from(Array.isArray(annotation.body) ? annotation.body : [annotation.body]);\n      for (const reference of references) {\n        const [ref, { selector }] = parseSpecificResource(reference as any);\n        const body = vault.get(ref);\n        const type = (body.type || 'unknown').toLowerCase();\n\n        // Choice\n        if (type === 'choice') {\n          const nestedBodies = vault.get((body as any).items, { parent: (body as any).id }) as ContentResource[];\n          // Which are active? By default, the first, but we could push multiple here.\n          const selected = enabledChoices.length\n            ? enabledChoices.map((cid) => nestedBodies.find((b) => b.id === cid)).filter(Boolean)\n            : [nestedBodies[0]];\n\n          if (selected.length === 0) {\n            selected.push(nestedBodies[0]);\n          }\n\n          // Store choice.\n          choices.items.push({\n            type: 'single-choice',\n            items: nestedBodies.map((b) => ({\n              id: b.id,\n              label: (b as any).label as any,\n              selected: selected.indexOf(b) !== -1,\n            })) as any[],\n            label: (ref as any).label,\n          });\n\n          // @todo insert in the right order.\n          references.push(...(selected as any[]));\n\n          continue;\n        }\n\n        if (types.indexOf(type) === -1) {\n          types.push(type);\n        }\n\n        items.push({\n          type: type,\n          annotationId: annotation.id,\n          annotation: annotation as any,\n          resource: body as IIIFExternalWebResource,\n          target: annotation.target,\n          selector,\n        });\n      }\n    }\n\n    return {\n      types,\n      items,\n      choice: choices.items.length < 2 ? choices.items[0] || null : choices,\n      allChoices: choices.items.length ? choices : null,\n    };\n  }\n\n  function extractChoices(paintingAnnotationsOrCanvas: string | CanvasNormalized | AnnotationNormalized[]) {\n    const { choice } = getPaintables(paintingAnnotationsOrCanvas);\n    return choice;\n  }\n\n  return {\n    getAllPaintingAnnotations,\n    getPaintables,\n    extractChoices,\n  };\n}\n"],
  "mappings": ";AAQA,IAAMA,IAAiB,CAAA;AAAvB,IACaC,IAA2B,EACtC,IAAIC,IAAa;AACf,SAAOA;AAAA,GAET,aAAa,CAACC,IAAI,GAAM,CAAA,GAAM,GAAO;AACnC,MAAM,IAAW,EAAY,gBAAgBA,IAAI,CAAA,GAC3C,IAAe,IAAW,EAAS,CAAA,IAAO,QAC1C,IAAW,OAAO,KAAU,aAAc,EAAc,CAAA,IAAgB;AAC9E,IAAUA,EAAA,IAAM,EACd,GAAI,EAAUA,EAAA,KAAO,CAAA,GAAA,CACpB,CAAA,GAAO,EACN,IAAK,EAAUA,EAAA,KAAO,CAAA,GAAI,CAAA,KAAS,CAAA,GAAA,CAClC,CAAA,GAAM,EAAA,EAAA;AAAA,GAIb,kBAAA,CAAmBC,IAAeD,OAAkB;AAClD,MAAM,IAAe,EAAUC,EAAA;AAE1B,MAAA,EAOL,QAJKD,KAIE,EAAaA,EAAA,IAHX;AAAA,IAKX,MAAM,KAAKD,IAAwC;AACjD,MAAME,KAAW,OAAOF,MAAO,WAAWA,KAAKA,GAAG;AAGlD,SAAO,MAAME,EAAA,EAAU,KAAM,CAAAF,OAAaA,GAAS,KAAA,CAAA;AAAA,GAErD,cAAcA,IAAY;AAAA,EAAA;;;ACzC5B,SAAgBG,GAAsBC,IAA+E;AAKnH,SAJIA,GAAS,SAAS,qBACb,CAACA,GAAS,QAAQ,EAAE,UAAUA,GAAS,SAAA,CAAA,IAGzC,CAACA,IAAU,EAAE,UAAU,KAAA,CAAA;AAAA;ACDhC,SAAgB,EAAgCC,KAAqB,GAAa;AAChF,WAAS,EAA0BD,IAA0D;AAC3F,QAAMD,KAASC,KACX,OAAOA,MAAe,WACpBC,GAAM,IAAsBD,EAAA,IAC5BA,KACF;AAEJ,QAAI,CAACD,GACH,QAAO,CAAA;AAET,QAAMG,KAAkBD,GAAM,IAAIF,GAAO,OAAO,EAAE,QAAQA,GAAA,CAAA,GACpDI,KAA0C,CAAA;AAChD,aAAWH,MAAQE,GACjB,CAAAE,GAAgB,KAAK,GAAGH,GAAM,IAAID,GAAK,OAAO,EAAE,QAAQA,GAAA,CAAA,CAAA;AAE1D,WAAOI;EAAA;AAGT,WAAS,EACPJ,IACAI,KAA2B,CAAA,GACf;AACZ,QAAMC,KAAsB,MAAM,QAAQL,EAAA,IACtCA,KACA,EAA0BA,EAAA,GAExBM,IAAkB,CAAA,GACpBC,IAAyB,EAC3B,OAAO,CAAA,GACP,MAAM,iBAAA,GAEFC,IAA6B,CAAA;AAEnC,aAAWR,MAAcK,IAAqB;AAC5C,UAAIL,GAAW,SAAS,aACtB,OAAU,MAAM,+DAAA;AAGlB,UAAME,KAAa,MAAM,KAAK,MAAM,QAAQF,GAAW,IAAA,IAAQA,GAAW,OAAO,CAACA,GAAW,IAAA,CAAA;AAC7F,eAAWK,MAAaH,IAAY;AAClC,YAAM,CAAC,GAAK,EAAE,UAAA,EAAA,CAAA,IAAcH,GAAsBM,EAAA,GAC5C,IAAOJ,GAAM,IAAI,CAAA,GACjB,KAAQ,EAAK,QAAQ,WAAW,YAAA;AAGtC,YAAI,MAAS,UAAU;AACrB,cAAMD,KAAeC,GAAM,IAAK,EAAa,OAAO,EAAE,QAAS,EAAa,GAAA,CAAA,GAEtEF,KAAWK,GAAe,SAC5BA,GAAe,IAAK,CAAAL,OAAQC,GAAa,KAAM,CAAAA,OAAMA,GAAE,OAAOD,EAAA,CAAA,EAAM,OAAO,OAAA,IAC3E,CAACC,GAAa,CAAA,CAAA;AAEd,UAAAD,GAAS,WAAW,KACtBA,GAAS,KAAKC,GAAa,CAAA,CAAA,GAI7B,EAAQ,MAAM,KAAK,EACjB,MAAM,iBACN,OAAOA,GAAa,IAAK,CAAAA,QAAO,EAC9B,IAAIA,GAAE,IACN,OAAQA,GAAU,OAClB,UAAUD,GAAS,QAAQC,EAAA,MAAO,GAAA,EAAA,GAEpC,OAAQ,EAAY,MAAA,CAAA,GAItBE,GAAW,KAAK,GAAIH,EAAA;AAEpB;QAAA;AAGE,UAAM,QAAQ,CAAA,MAAU,MAC1B,EAAM,KAAK,CAAA,GAGb,EAAM,KAAK,EACH,MAAA,GACN,cAAcC,GAAW,IACb,YAAAA,IACZ,UAAU,GACV,QAAQA,GAAW,QACnB,UAAA,EAAA,CAAA;MAAA;IAAA;AAKN,WAAO,EACL,OAAA,GACA,OAAA,GACA,QAAQ,EAAQ,MAAM,SAAS,IAAI,EAAQ,MAAM,CAAA,KAAM,OAAO,GAC9D,YAAY,EAAQ,MAAM,SAAS,IAAU,KAAA;EAAA;AAIjD,WAAS,EAAeA,IAAiF;AACvG,QAAM,EAAE,QAAAD,GAAA,IAAW,EAAcC,EAAA;AACjC,WAAOD;EAAA;AAGT,SAAO,EACL,2BAAA,GACA,eAAA,GACA,gBAAA,EAAA;AAAA;",
  "names": ["metaState: any", "compatVault: CompatVault", "e", "n", "t", "t", "e", "n", "r", "flatAnnotations: AnnotationNormalized[]", "i", "a", "types: string[]", "choices: ComplexChoice", "items: Paintables['items']"]
}
