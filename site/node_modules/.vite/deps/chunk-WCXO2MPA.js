// node_modules/@iiif/helpers/dist/compat-167ipRuK.js
var e = {};
var t = { get(e2) {
  return e2;
}, setMetaValue([n2, r, i], a) {
  let o = t.getResourceMeta(n2, r), s = o ? o[i] : void 0, c = typeof a == `function` ? a(s) : a;
  e[n2] = { ...e[n2] || {}, [r]: { ...(e[n2] || {})[r] || {}, [i]: c } };
}, getResourceMeta: ((t3, n2) => {
  let r = e[t3];
  if (r) return n2 ? r[n2] : r;
}), async load(e2) {
  let t3 = typeof e2 == `string` ? e2 : e2.id;
  return fetch(t3).then((e3) => e3.json());
}, requestStatus(e2) {
} };

// node_modules/@iiif/helpers/dist/painting-annotations-0y-vpoUY.js
function t2(e2) {
  return e2.type === `SpecificResource` ? [e2.source, { selector: e2.selector }] : [e2, { selector: null }];
}
function n(n2 = t) {
  function r(e2) {
    let t3 = e2 ? typeof e2 == `string` ? n2.get(e2) : e2 : null;
    if (!t3) return [];
    let r2 = n2.get(t3.items, { parent: t3 }), i2 = [];
    for (let e3 of r2) i2.push(...n2.get(e3.items, { parent: e3 }));
    return i2;
  }
  function i(e2, i2 = []) {
    let a2 = Array.isArray(e2) ? e2 : r(e2), o = [], s = { items: [], type: `complex-choice` }, c = [];
    for (let e3 of a2) {
      if (e3.type !== `Annotation`) throw Error(`getPaintables() accept either a canvas or list of annotations`);
      let r2 = Array.from(Array.isArray(e3.body) ? e3.body : [e3.body]);
      for (let a3 of r2) {
        let [l, { selector: u }] = t2(a3), d = n2.get(l), f = (d.type || `unknown`).toLowerCase();
        if (f === `choice`) {
          let e4 = n2.get(d.items, { parent: d.id }), t3 = i2.length ? i2.map((t4) => e4.find((e5) => e5.id === t4)).filter(Boolean) : [e4[0]];
          t3.length === 0 && t3.push(e4[0]), s.items.push({ type: `single-choice`, items: e4.map((e5) => ({ id: e5.id, label: e5.label, selected: t3.indexOf(e5) !== -1 })), label: l.label }), r2.push(...t3);
          continue;
        }
        o.indexOf(f) === -1 && o.push(f), c.push({ type: f, annotationId: e3.id, annotation: e3, resource: d, target: e3.target, selector: u });
      }
    }
    return { types: o, items: c, choice: s.items.length < 2 ? s.items[0] || null : s, allChoices: s.items.length ? s : null };
  }
  function a(e2) {
    let { choice: t3 } = i(e2);
    return t3;
  }
  return { getAllPaintingAnnotations: r, getPaintables: i, extractChoices: a };
}

export {
  t,
  t2,
  n
};
//# sourceMappingURL=chunk-WCXO2MPA.js.map
