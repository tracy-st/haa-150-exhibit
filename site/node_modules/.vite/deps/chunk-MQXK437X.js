import {
  de,
  j2 as j,
  z
} from "./chunk-JVEBHM4B.js";

// node_modules/react-iiif-vault/dist/chunk-XNDN34SQ.js
function j2(e) {
  return e.type === "SpecificResource" ? [e.source, { selector: e.selector }] : [e, { selector: null }];
}
function x(e, o) {
  let { selector: r, source: i } = z(o);
  if (i.id !== e.id) return [null, i];
  let t = { type: "BoxSelector", spatial: { x: 0, y: 0, width: Number(e.width), height: Number(e.height) } };
  return [r ? r.type === "TemporalSelector" ? { type: "TemporalBoxSelector", temporal: r.temporal, spatial: t.spatial } : r : null, i];
}
var Q = { makeChoice: () => {
} };
var T = { type: "unknown" };
var p = (e) => ({ type: "unknown", reason: e, annotations: { pages: [] } });
var v = (e, o) => ({ type: "empty", width: e, height: o, annotations: { pages: [] }, image: null, images: [] });
var O = ["model/gltf-binary"];
function R2(e, o) {
  let r = o.items[0], i = r.resource;
  return i.format ? O.indexOf(i.format) === -1 ? p(`3D format: ${i.format} is unsupported`) : { type: "3d-model", model: i, annotationId: r.annotationId, annotation: r.annotation } : p("Unknown format");
}
function C(e, o, r) {
  var _a;
  let i = [];
  for (let t of o.items) {
    let s = t.resource && t.resource.type === "SpecificResource" ? t.resource.source : t.resource;
    if (!s.id) return p("No resource Identifier");
    let m;
    if (s.service) {
      let g = de(s);
      g[0] && (m = r(g[0], e));
    }
    let y = { type: "BoxSelector", spatial: { x: 0, y: 0, width: Number(e.width), height: Number(e.height) } }, [d, a] = x(e, t.target), n = ((_a = e.id) == null ? void 0 : _a.split("?")[0]) || "";
    if (!(a.id === e.id || decodeURIComponent(a.id || "") === (e.id || "") || a.id === n || decodeURIComponent(a.id || "") === n)) continue;
    let l = t.resource.width && t.resource.height ? { type: "BoxSelector", spatial: { x: 0, y: 0, width: t.resource.width, height: t.resource.height } } : void 0, c = t.resource.type === "SpecificResource" ? z(t.resource) : null;
    if (t.selector) {
      let g = z({ type: "SpecificResource", source: t.resource, selector: t.selector });
      g && (c = g);
    }
    let u = c && c.selector && (c.selector.type === "BoxSelector" || c.selector.type === "TemporalBoxSelector") ? { type: "BoxSelector", spatial: { x: c.selector.spatial.x, y: c.selector.spatial.y, width: c.selector.spatial.width, height: c.selector.spatial.height } } : void 0;
    m && !m.id && (m.id = m["@id"]);
    let f = { id: s.id, type: "Image", annotationId: t.annotationId, annotation: t.annotation, width: Number(d || u ? s.width : e.width), height: Number(d || u ? s.height : e.height), service: m, sizes: m && m.sizes ? m.sizes : s.width && s.height ? [{ width: s.width, height: s.height }] : [], target: d && d.type !== "PointSelector" ? d : y, selector: u || { type: "BoxSelector", spatial: { x: 0, y: 0, width: Number(e.width), height: Number(e.height) } } };
    i.push(f);
  }
  return { type: "images", image: i[0], images: i, choice: o.choice };
}
function P(e, o = {}, r) {
  let i = e.language || r || "none";
  switch (e.type) {
    case "TextualBody": {
      typeof e.value < "u" && (o[i] = [e.value]);
      break;
    }
    case "List":
    case "Composite":
    case "Choice":
      e.items && e.items.forEach((t) => P(t, o, i));
  }
  return o;
}
function I2(e, o) {
  let r = [];
  return o.items.forEach((i) => {
    if (i.resource) {
      let [t] = x(e, i.target);
      r.push({ type: "Text", annotationId: i.annotationId, annotation: i.annotation, text: P(i.resource), target: t });
    }
  }), { type: "textual-content", items: r };
}
var E = /^.*(?:(?:youtu\.be\/|v\/|vi\/|u\/\w\/|embed\/|shorts\/)|(?:(?:watch)?\?vi?=|&vi?=))([^#&?]*).*/;
function b(e, o, r) {
  var _a;
  let i = o.items.filter((u) => u.type === "video"), t = i[0], s = false;
  if (e.duration || (s = true), i.length > 1 || !t) return p("Only one video source supported");
  let m = (_a = i[0]) == null ? void 0 : _a.resource, y = !!(m.service || []).find((u) => (u.profile || "").includes("youtube.com"));
  if (!y && s) return p("Video does not have duration");
  if (!m) return p("Unknown video");
  if ((!m.format || m.format === "text/html") && !y) return p("Video does not have format");
  let d = [], a = r.get(e.annotations || []);
  for (let u of a) {
    let f = r.get(u.items || []);
    for (let g of f) if ((g.motivation ? Array.isArray(g.motivation || "") ? g.motivation : [g.motivation] : []).includes("supplementing")) {
      let A = r.get(g.body || []);
      for (let B of A) {
        let h = B;
        if (h.type === "Choice") for (let D of h.items) {
          let S = r.get(D);
          S.format === "text/vtt" && d.push({ id: S.id, type: "Text", format: "text/vtt", label: S.label, language: S.language });
        }
        else h.format === "text/vtt" && d.push({ id: h.id, type: "Text", format: "text/vtt", label: h.label, language: h.language });
      }
    }
  }
  let n = { annotationId: t.annotationId, annotation: t.annotation, duration: e.duration, url: m.id, type: "Video", target: { type: "TemporalSelector", temporal: { startTime: 0, endTime: e.duration } }, format: m.format, selector: { type: "TemporalSelector", temporal: { startTime: 0, endTime: e.duration } } }, l = z(t.target);
  l.selector && l.selector.type === "TemporalBoxSelector" && (n.target = l.selector);
  let { selector: c } = j(t.selector);
  if (c === null) {
    let u = n.target.temporal.startTime, g = (n.target.temporal.endTime || e.duration) - u;
    n.selector = { type: "TemporalSelector", temporal: { startTime: 0, endTime: g } };
  } else c.type === "TemporalSelector" && (n.selector = c);
  if (y) {
    n.type = "VideoYouTube";
    let u = m.id.match(E);
    if (!u[1]) return p("Video is not known youtube video");
    n.youTubeId = u[1];
  }
  return { type: "media", media: n, annotations: { pages: [] }, captions: d };
}
function k(e, o, r, i) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
  let t = { type: "complex-timeline", items: [], keyframes: [], duration: e.duration || 0 }, s = { type: "complex-choice", items: [] };
  function m(a) {
    a.choice && (a.choice.type === "complex-choice" ? s.items.push(...a.choice.items) : s.items.push(a.choice));
  }
  for (let a of o.items) {
    if (a.type === "image") {
      let n = C(e, { choice: null, allChoices: null, types: ["image"], items: [a] }, r);
      if (n.type === "images") {
        m(n), t.items.push(n.image);
        let l = { id: n.image.annotationId, type: "enter", resourceType: "image", time: ((_b = (_a = n.image.target) == null ? void 0 : _a.temporal) == null ? void 0 : _b.startTime) || 0 };
        t.keyframes.push(l);
        let c = { id: n.image.annotationId, type: "exit", resourceType: "image", time: ((_d = (_c = n.image.target) == null ? void 0 : _c.temporal) == null ? void 0 : _d.endTime) || e.duration || 0 };
        t.keyframes.push(c);
      }
    }
    if (a.type === "textualbody") {
      let n = I2(e, { choice: null, allChoices: null, types: ["textualbody"], items: [a] });
      if (n.type === "textual-content") {
        m(n);
        let l = n.items[0];
        t.items.push(l);
        let c = l.target, u = { id: l.annotationId, type: "enter", resourceType: "text", time: ((_e = c.temporal) == null ? void 0 : _e.startTime) || 0 };
        t.keyframes.push(u);
        let f = { id: l.annotationId, type: "exit", resourceType: "text", time: ((_f = c.temporal) == null ? void 0 : _f.endTime) || e.duration || 0 };
        t.keyframes.push(f);
      }
    }
    if (a.type === "video") {
      let n = b(e, { choice: null, allChoices: null, types: ["video"], items: [a] }, i);
      if (n.type === "media") {
        m(n);
        let l = n.media;
        t.items.push(l);
        let c = { id: l.annotationId, type: "enter", resourceType: "video", time: ((_h = (_g = l.target) == null ? void 0 : _g.temporal) == null ? void 0 : _h.startTime) || 0 };
        t.keyframes.push(c);
        let u = { id: l.annotationId, type: "exit", resourceType: "video", time: ((_j = (_i = l.target) == null ? void 0 : _i.temporal) == null ? void 0 : _j.endTime) || e.duration || 0 };
        t.keyframes.push(u);
      }
    }
  }
  t.keyframes.sort((a, n) => a.time - n.time);
  let y = [], d = [];
  for (let a of t.keyframes) {
    if (a.resourceType === "image" || a.resourceType === "text") {
      d.push(a);
      continue;
    }
    if (a.type === "enter") {
      y.length === 0 && (a.isPrime = true), y.push(a), d.push(a);
      continue;
    }
    if (a.type === "exit" && (d.push(a), y = y.filter((n) => n.id !== a.id), y.length !== 0)) {
      let n = y[0], l = { id: n.id, type: "change", isPrime: true, resourceType: n.resourceType, time: a.time };
      d.push(l);
    }
  }
  return t.keyframes = d, s.items.length && (t.choice = s), t;
}
function z2(e, o) {
  let r = o.items, i = r[0];
  if (r.length === 0 || !i) return p("No audio");
  if (!e.duration) return p("No duration on canvas");
  if (r.length > 1) return p("Only one audio source supported");
  let t = i.resource;
  return t ? "format" in t ? { type: "media", media: { annotationId: i.annotationId, annotation: i.annotation, duration: e.duration, url: t.id, type: "Sound", target: { type: "TemporalSelector", temporal: { startTime: 0, endTime: e.duration } }, format: t.format, selector: { type: "TemporalSelector", temporal: { startTime: 0, endTime: e.duration } } }, annotations: { pages: [] } } : p("Audio does not have format") : p("Unknown audio");
}
var V = {};
var w = { get(e) {
  return e;
}, setMetaValue([e, o, r], i) {
  let t = w.getResourceMeta(e, o), s = t ? t[r] : void 0, m = typeof i == "function" ? i(s) : i;
  V[e] = { ...V[e] || {}, [o]: { ...(V[e] || {})[o] || {}, [r]: m } };
}, getResourceMeta: (e, o) => {
  let r = V[e];
  if (r) return o ? r[o] : r;
}, async load(e) {
  let o = typeof e == "string" ? e : e.id;
  return fetch(o).then((r) => r.json());
}, requestStatus(e) {
} };
function Ve({ canvas: e, paintables: o, supports: r, loadImageService: i, vault: t = w }) {
  if (!e) return T;
  if (o.types.length === 0) return r.indexOf("empty") !== -1 ? v(e.width, e.height) : T;
  if (o.types.length !== 1) if (o.types.length === 2 && o.types.indexOf("text") !== -1) o.types = o.types.filter((m) => m !== "text");
  else return r.indexOf("complex-timeline") === -1 ? p("Complex timeline not supported") : k(e, o, i, t);
  let s = o.types[0];
  return s === "image" ? r.indexOf("images") === -1 ? p("Image not supported") : C(e, o, i) : s === "Model" || s === "model" ? r.indexOf("3d-model") === -1 ? p("3D not supported") : R2(e, o) : s === "textualbody" ? r.indexOf("textual-content") === -1 ? p("Textual content not supported") : I2(e, o) : s === "sound" || s === "audio" ? r.indexOf("media") === -1 ? p("Media not supported") : z2(e, o) : s === "video" ? r.indexOf("media") === -1 ? p("Media not supported") : b(e, o, t) : T;
}

export {
  j2 as j,
  x,
  Q,
  T,
  p,
  v,
  R2 as R,
  C,
  I2 as I,
  b,
  k,
  Ve
};
//# sourceMappingURL=chunk-MQXK437X.js.map
