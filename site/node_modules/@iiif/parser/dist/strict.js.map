{"version":3,"file":"strict.js","names":["item: Partial<Presentation3.TechnicalProperties>","logging: InternalLogging","values: Array<any> | undefined","isValid: (value: any) => string | undefined","value: any","propName: string","value: undefined | string | number","str: Presentation3.InternationalString","fixed: Presentation3.InternationalString","str","input: Presentation3.MetadataItem","item: Partial<Presentation3.DescriptiveProperties>","validItemMapping: any","resource: any","item: Partial<Presentation3.LinkingProperties>","state: InternalLogging","p3: Presentation3.Manifest"],"sources":["../src/presentation-3/strict-upgrade.ts"],"sourcesContent":["import * as Presentation3 from '@iiif/presentation-3';\nimport { Traverse } from './traverse';\nimport { removeUndefinedProperties } from '../shared/remove-undefined-properties';\n\nconst validNavDate =\n  /-?([1-9]\\d{3,}|0\\d{3})-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])T(([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(\\.\\d+)?|(24:00:00(\\.0+)?))(Z|(\\+|-)((0\\d|1[0-3]):[0-5]\\d|14:00))?/;\n\ninterface InternalLogging {\n  warnings: string[];\n}\n\nconst globalWarnings = { warnings: [] };\n\nfunction technicalProperties(\n  item: Partial<Presentation3.TechnicalProperties>,\n  logging: InternalLogging = globalWarnings\n): Partial<Presentation3.TechnicalProperties> {\n  if (item.behavior) {\n    item.behavior = ensureArrayWarning(item.behavior, 'behavior', logging);\n  }\n\n  item.width = ensureValidNumber(item.width, 'width', false, logging);\n  item.height = ensureValidNumber(item.height, 'height', false, logging);\n  item.duration = ensureValidNumber(item.duration, 'duration', true, logging);\n\n  if (item.format && typeof item.format !== 'string') {\n    logging.warnings.push(`\"format\" should be a single string`);\n    if (Array.isArray(item.format) && typeof item.format[0] === 'string') {\n      item.format = item.format[0];\n    } else {\n      item.format = undefined;\n    }\n  }\n\n  return item;\n}\n\nfunction ensureArrayMatches(\n  values: Array<any> | undefined,\n  isValid: (value: any) => string | undefined,\n  logging: InternalLogging = globalWarnings\n) {\n  if (values && Array.isArray(values)) {\n    return values.filter((value) => {\n      const message = isValid(value);\n      if (message && logging.warnings.indexOf(message) === -1) {\n        logging.warnings.push(message);\n      }\n      return !message;\n    });\n  }\n  return values;\n}\n\nfunction ensureArrayWarning(value: any, propName: string, logging: InternalLogging = globalWarnings) {\n  if (Array.isArray(value)) {\n    return value;\n  }\n  logging.warnings.push(`\"${propName}\" should be Array of values`);\n  return [value];\n}\n\nfunction ensureNotArrayWarning(value: any, propName: string, logging: InternalLogging = globalWarnings) {\n  if (Array.isArray(value)) {\n    logging.warnings.push(`\"${propName}\" should only contain a single value`);\n    if (value.length === 0) {\n      return undefined;\n    }\n    return value[0];\n  }\n  return value;\n}\n\nfunction ensureValidNumber(\n  value: undefined | string | number,\n  propName: string,\n  isFloat = false,\n  logging: InternalLogging = globalWarnings\n): number | undefined {\n  if (typeof value === 'undefined') {\n    return undefined;\n  }\n\n  if (typeof value === 'string') {\n    const newValue = isFloat ? parseFloat(value) : Math.abs(Number(value));\n    if (Number.isNaN(newValue) || newValue <= 0) {\n      logging.warnings.push(\n        `\"${propName}\" expected value to be a ${isFloat ? 'Number' : 'Integer'}, instead found an invalid value`\n      );\n      return undefined;\n    }\n    logging.warnings.push(\n      `\"${propName}\" expected value to be a ${isFloat ? 'Number' : 'Integer'}, instead found a string`\n    );\n    return newValue;\n  }\n\n  if (!isFloat && value % 1 !== 0) {\n    logging.warnings.push(`\"${propName}\" expected value to be a Integer, instead found a Float`);\n    return Math.floor(value);\n  }\n\n  return value;\n}\n\nfunction ensureValidLanguageMap(\n  str: Presentation3.InternationalString,\n  propName: string,\n  logging: InternalLogging = globalWarnings\n): Presentation3.InternationalString {\n  // Handle {\"label\": [\"an array of strings\"]}\n  if (Array.isArray(str)) {\n    if (typeof str[0] === 'string') {\n      logging.warnings.push(`\"${propName}\" should be a language map instead found a string`);\n      return { none: str };\n    }\n    logging.warnings.push(`\"${propName}\" should be a language map instead found an unknown value`);\n    return { none: [''] };\n  }\n\n  if (typeof str === 'string') {\n    logging.warnings.push(`\"${propName}\" should be a language map instead found a string`);\n    return { none: [str] };\n  }\n\n  // Handle {\"label\": {\"en\": \"some value\"}\n  const keys = Object.keys(str);\n  const fixed: Presentation3.InternationalString = {};\n  let didFix = false;\n  for (const key of keys) {\n    const values = str[key] as unknown;\n    const fixedItem = [];\n    if (typeof values === 'string') {\n      didFix = true;\n      logging.warnings.push(`\"${propName}\" values inside a language map should be an Array of strings, found a string`);\n      fixedItem.push(values);\n    } else if (Array.isArray(values)) {\n      for (const str of values) {\n        if (!(typeof str === 'string')) {\n          didFix = true;\n          logging.warnings.push(\n            `\"${propName}\" values inside a language map should be an Array of strings, found an unknown value`\n          );\n          // Nothing to do here? - but mark as needing fixed.\n        } else {\n          fixedItem.push(str);\n        }\n      }\n    } else {\n      didFix = true;\n      logging.warnings.push(\n        `\"${propName}\" values inside a language map should be an Array of strings, found an unknown value`\n      );\n    }\n    if (fixedItem.length > 0) {\n      fixed[key] = fixedItem;\n    }\n  }\n\n  if (didFix) {\n    if (Object.keys(fixed).length === 0) {\n      return { none: [''] };\n    }\n\n    return fixed;\n  }\n\n  return str;\n}\n\nfunction validMetadataValue(\n  input: Presentation3.MetadataItem,\n  propName: string,\n  defaultLabel = '',\n  logging: InternalLogging = globalWarnings\n): Presentation3.MetadataItem {\n  if (typeof input === 'string') {\n    logging.warnings.push(`\"${propName}\" should be a {label, value} set of Language maps`);\n    return {\n      label: { none: [defaultLabel] },\n      value: { none: [input] },\n    };\n  } else {\n    if ((!input.label && input.value) || (input.label && !input.value)) {\n      logging.warnings.push(`\"${propName}\" should have both a label and a value`);\n    }\n    if (input.label) {\n      input.label = ensureValidLanguageMap(input.label, `${propName}.label`, logging);\n    } else {\n      input.label = { none: [defaultLabel] };\n    }\n    if (input.value) {\n      input.value = ensureValidLanguageMap(input.value, `${propName}.value`, logging);\n    } else {\n      input.value = { none: [''] };\n    }\n  }\n\n  return input;\n}\n\nfunction descriptiveProperties(\n  item: Partial<Presentation3.DescriptiveProperties>,\n  logging: InternalLogging = globalWarnings\n): Partial<Presentation3.DescriptiveProperties> {\n  if (item.label) {\n    item.label = ensureValidLanguageMap(item.label, 'label', logging);\n  }\n  if (item.summary) {\n    item.summary = ensureValidLanguageMap(item.summary, 'summary', logging);\n  }\n\n  if (item.requiredStatement) {\n    item.requiredStatement = validMetadataValue(\n      item.requiredStatement,\n      'requiredStatement',\n      'Required statement',\n      logging\n    );\n  }\n\n  if (item.metadata) {\n    if (Array.isArray(item.metadata)) {\n      for (let i = 0; i < item.metadata.length; i++) {\n        item.metadata[i] = validMetadataValue(item.metadata[i]!, `metadata.${i}`, '', logging);\n      }\n    } else {\n      logging.warnings.push(`\"metadata\" should be an array of {label, value} Language maps`);\n      item.metadata = [];\n    }\n  }\n\n  if (item.rights) {\n    if (Array.isArray(item.rights)) {\n      logging.warnings.push(`\"rights\" should only contain a single string`);\n      item.rights = typeof item.rights[0] === 'string' ? item.rights[0] : '';\n    }\n    if (typeof item.rights === 'string' && !item.rights.startsWith('http')) {\n      logging.warnings.push(`\"rights\" should be a valid URI`);\n    } else if (typeof item.rights === 'string' && item.rights.startsWith('https')) {\n      logging.warnings.push(\n        `\"rights\" is an informative property and should contain the http variation of the rights statement`\n      );\n      item.rights = `http${item.rights.slice(5)}`;\n    }\n  }\n\n  if (item.navDate) {\n    const trimmedNavDate = typeof item.navDate === 'string' ? item.navDate.trim() : undefined;\n    if (trimmedNavDate !== item.navDate) {\n      logging.warnings.push(`\"navDate\" should not contain extra whitespace`);\n      item.navDate = trimmedNavDate;\n    }\n    if (typeof item.navDate !== 'string' || !item.navDate.match(validNavDate)) {\n      logging.warnings.push(`\"navDate\" should be a valid XSD dateTime literal`);\n      item.navDate = undefined;\n    }\n  }\n\n  if (item.language) {\n    item.language = ensureArrayWarning(item.language, 'language', logging);\n    item.language = ensureArrayMatches(\n      item.language,\n      (value) => (typeof value === 'string' ? undefined : `'\"language\" expected array of strings`),\n      logging\n    );\n  }\n  if (item.accompanyingCanvas) {\n    item.accompanyingCanvas = ensureNotArrayWarning(item.accompanyingCanvas, 'accompanyingCanvas', logging);\n    if (item.accompanyingCanvas?.type !== 'Canvas') {\n      logging.warnings.push(`\"accompanyingCanvas\" should be a Canvas`);\n    }\n  }\n  if (item.placeholderCanvas) {\n    item.placeholderCanvas = ensureNotArrayWarning(item.placeholderCanvas, 'placeholderCanvas', logging);\n    if (item.placeholderCanvas?.type !== 'Canvas') {\n      logging.warnings.push(`\"placeholderCanvas\" should be a Canvas`);\n    }\n  }\n  if (item.thumbnail) {\n    item.thumbnail = ensureArrayWarning(item.thumbnail, 'thumbnail', logging);\n  }\n  return item;\n}\n\nconst validItemMapping: any = {\n  Manifest: 'Canvas',\n  Canvas: 'AnnotationPage',\n  AnnotationPage: 'Annotation',\n};\n\nfunction structuralProperties(resource: any, logging: InternalLogging = globalWarnings) {\n  const type = resource.type;\n  switch (type) {\n    case 'Canvas':\n    case 'AnnotationPage':\n    case 'Manifest': {\n      if (resource && resource.items) {\n        resource.items = ensureArrayMatches(\n          resource.items,\n          (item) =>\n            item.type === validItemMapping[type]\n              ? undefined\n              : `\"${resource.type}.items\" should contain only type ${validItemMapping[type]}, found ${item.type}`,\n          logging\n        );\n      }\n    }\n  }\n\n  return resource;\n}\n\nfunction linkingProperties(\n  item: Partial<Presentation3.LinkingProperties>,\n  logging: InternalLogging = globalWarnings\n): Partial<Presentation3.LinkingProperties> {\n  if (item.logo) {\n    item.logo = ensureArrayWarning(item.logo, 'logo', logging);\n  }\n  if (item.service) {\n    item.service = ensureArrayWarning(item.service, 'service', logging);\n  }\n\n  if (item.seeAlso) {\n    item.seeAlso = ensureArrayWarning(item.seeAlso, 'seeAlso', logging);\n  }\n\n  if (item.rendering) {\n    item.rendering = ensureArrayWarning(item.rendering, 'rendering', logging);\n  }\n\n  if (item.partOf) {\n    item.partOf = ensureArrayWarning(item.partOf, 'partOf', logging);\n  }\n\n  if (item.homepage) {\n    item.homepage = ensureArrayWarning(item.homepage, 'homepage', logging);\n  }\n\n  if (item.services) {\n    item.services = ensureArrayWarning(item.services, 'services', logging);\n  }\n\n  if (item.supplementary) {\n    item.supplementary = ensureArrayWarning(item.supplementary, 'supplementary', logging);\n  }\n\n  if (item.start) {\n    item.start = ensureNotArrayWarning(item.start, 'start', logging);\n  }\n\n  return item;\n}\n\nfunction upgradeResource(state: InternalLogging) {\n  return (resource: any) => {\n    if (!resource) {\n      return undefined;\n    }\n\n    if (typeof resource === 'string') {\n      return resource;\n    }\n\n    if (Array.isArray(resource)) {\n      return resource;\n    }\n\n    return removeUndefinedProperties({\n      ...resource,\n      ...technicalProperties(resource, state),\n      ...descriptiveProperties(resource, state),\n      ...linkingProperties(resource, state),\n      ...structuralProperties(resource, state),\n    });\n  };\n}\n\nexport function presentation3StrictUpgrade(\n  p3: Presentation3.Manifest,\n  state: InternalLogging = globalWarnings\n): Presentation3.Manifest {\n  const traverse = Traverse.all(upgradeResource(state));\n\n  return traverse.traverseManifest(p3);\n}\n"],"mappings":"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"}