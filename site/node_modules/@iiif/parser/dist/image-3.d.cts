import { ImageService, ImageSize, Service } from "@iiif/presentation-3";

//#region src/image-3/types.d.ts

/**
 * Size parameter
 *
 * Represents the {size} parameter of a IIIF image request.
 * see https://iiif.io/api/image/3.0/#42-size
 * Port of https://github.com/digirati-co-uk/iiif-net/blob/main/src/IIIF/IIIF/ImageApi/SizeParameter.cs
 */
type SizeParameter = {
  height?: number;
  width?: number;
  max: boolean;
  serialiseAsFull?: boolean;
  upscaled: boolean;
  confined: boolean;
  percentScale?: number;
  version?: 2 | 3;
};
/**
 * Region parameter
 *
 * Represents the {region} parameter of a IIIF image request.
 * see https://iiif.io/api/image/3.0/#41-region
 * Port of https://github.com/digirati-co-uk/iiif-net/blob/main/src/IIIF/IIIF/ImageApi/RegionParameter.cs
 */
type RegionParameter = {
  x?: number;
  y?: number;
  w?: number;
  h?: number;
  full?: boolean;
  square?: boolean;
  percent?: boolean;
};
/**
 * Rotation parameter
 *
 * Represents the {rotation} parameter of a IIIF image request.
 * see https://iiif.io/api/image/3.0/#43-rotation
 * Port of https://github.com/digirati-co-uk/iiif-net/blob/main/src/IIIF/IIIF/ImageApi/RotationParameter.cs
 */
type RotationParameter = {
  mirror?: boolean;
  angle: number;
};
type ImageServiceImageRequest = {
  type: 'base';
  scheme: string;
  server: string;
  prefix: string;
  identifier: string;
} | {
  type: 'info';
  scheme: string;
  server: string;
  prefix: string;
  identifier: string;
} | {
  type: 'image';
  scheme: string;
  server: string;
  prefix: string;
  identifier: string;
  region: RegionParameter;
  size: SizeParameter;
  rotation: RotationParameter;
  quality: string;
  format: string;
  originalPath: string;
};
//#endregion
//#region src/image-3/parser/parse-image-server-from-id.d.ts
/**
 * Get image server from ID.
 *
 * Normalises image service URLs to extract identity of the image server.
 *
 * @param url
 */
declare function parseImageServerFromId(url: string): string;
//#endregion
//#region src/image-3/parser/parse-image-service-request.d.ts
declare function parseImageServiceRequest(input: string, _prefix?: string): ImageServiceImageRequest;
//#endregion
//#region src/image-3/parser/parse-image-service-url.d.ts
declare function parseImageServiceUrl(canonicalId: string, prefix?: string): {
  scheme: string;
  server: string;
  path: string;
  prefix: string;
};
//#endregion
//#region src/image-3/parser/parse-region-parameter.d.ts
declare function parseRegionParameter(pathPart: string): RegionParameter;
//#endregion
//#region src/image-3/parser/parse-rotation-parameter.d.ts
declare function parseRotationParameter(pathPart: string): RotationParameter;
//#endregion
//#region src/image-3/parser/parse-size-parameter.d.ts
declare function parseSizeParameter(pathPart: string): SizeParameter;
//#endregion
//#region src/image-3/profiles/profiles.d.ts
declare const STANFORD_IIIF_IMAGE_COMPLIANCE_0 = "http://library.stanford.edu/iiif/image-api/compliance.html#level0";
declare const STANFORD_IIIF_IMAGE_COMPLIANCE_1 = "http://library.stanford.edu/iiif/image-api/compliance.html#level1";
declare const STANFORD_IIIF_IMAGE_COMPLIANCE_2 = "http://library.stanford.edu/iiif/image-api/compliance.html#level2";
declare const STANFORD_IIIF_IMAGE_CONFORMANCE_0 = "http://library.stanford.edu/iiif/image-api/conformance.html#level0";
declare const STANFORD_IIIF_IMAGE_CONFORMANCE_1 = "http://library.stanford.edu/iiif/image-api/conformance.html#level1";
declare const STANFORD_IIIF_IMAGE_CONFORMANCE_2 = "http://library.stanford.edu/iiif/image-api/conformance.html#level2";
declare const STANFORD_IIIF_1_IMAGE_COMPLIANCE_0 = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level0";
declare const STANFORD_IIIF_1_IMAGE_COMPLIANCE_1 = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level1";
declare const STANFORD_IIIF_1_IMAGE_COMPLIANCE_2 = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level2";
declare const STANFORD_IIIF_1_IMAGE_CONFORMANCE_0 = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level0";
declare const STANFORD_IIIF_1_IMAGE_CONFORMANCE_1 = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level1";
declare const STANFORD_IIIF_1_IMAGE_CONFORMANCE_2 = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level2";
declare const IIIF_1_IMAGE_LEVEL_0 = "http://iiif.io/api/image/1/level0.json";
declare const IIIF_1_IMAGE_LEVEL_0_PROFILE = "http://iiif.io/api/image/1/profiles/level0.json";
declare const IIIF_1_IMAGE_LEVEL_1 = "http://iiif.io/api/image/1/level1.json";
declare const IIIF_1_IMAGE_LEVEL_1_PROFILE = "http://iiif.io/api/image/1/profiles/level1.json";
declare const IIIF_1_IMAGE_LEVEL_2 = "http://iiif.io/api/image/1/level2.json";
declare const IIIF_1_IMAGE_LEVEL_2_PROFILE = "http://iiif.io/api/image/1/profiles/level2.json";
declare const IIIF_2_IMAGE_LEVEL_0 = "http://iiif.io/api/image/2/level0.json";
declare const IIIF_2_IMAGE_LEVEL_0_PROFILE = "http://iiif.io/api/image/2/profiles/level0.json";
declare const IIIF_2_IMAGE_LEVEL_1 = "http://iiif.io/api/image/2/level1.json";
declare const IIIF_2_IMAGE_LEVEL_1_PROFILE = "http://iiif.io/api/image/2/profiles/level1.json";
declare const IIIF_2_IMAGE_LEVEL_2 = "http://iiif.io/api/image/2/level2.json";
declare const IIIF_2_IMAGE_LEVEL_2_PROFILE = "http://iiif.io/api/image/2/profiles/level2.json";
declare const IIIF_3_IMAGE_LEVEL_0 = "level0";
declare const IIIF_3_IMAGE_LEVEL_1 = "level1";
declare const IIIF_3_IMAGE_LEVEL_2 = "level2";
declare const IIIF_2_IMAGE_LEVEL_0_NO_JSON = "http://iiif.io/api/image/2/level0";
declare const IIIF_2_IMAGE_LEVEL_1_NO_JSON = "http://iiif.io/api/image/2/level1";
declare const IIIF_2_IMAGE_LEVEL_2_NO_JSON = "http://iiif.io/api/image/2/level2";
declare const level2Support: string[];
declare const level1Support: string[];
declare const imageServiceProfiles: string[];
declare const level0Support: string[];
declare const onlyLevel0: string[];
type Profile = {
  extraFormats: string[];
  extraQualities: string[];
  extraFeatures: ExtraFeature[];
  maxArea?: number;
  maxHeight?: number;
  maxWidth?: number;
};
declare const level0: Profile;
declare const level1: Profile;
declare const level2: Profile;
declare const extraFeatures: readonly ["baseUriRedirect", "canonicalLinkHeader", "cors", "jsonldMediaType", "mirroring", "profileLinkHeader", "regionByPct", "regionByPx", "regionSquare", "rotationArbitrary", "rotationBy90s", "sizeByConfinedWh", "sizeByH", "sizeByPct", "sizeByW", "sizeByWh", "sizeUpscaling", "sizeByWhListed", "sizeByDistortedWh", "sizeByForcedWh"];
type ExtraFeature = typeof extraFeatures extends ReadonlyArray<infer ElementType> ? ElementType : never;
//#endregion
//#region src/image-3/profiles/combine-profiles.d.ts
declare function combineProfiles(service: ImageService): Profile;
//#endregion
//#region src/image-3/profiles/level-to-profile.d.ts
declare function levelToProfile(levelProfile: string): Profile;
//#endregion
//#region src/image-3/profiles/is-level-0.d.ts
declare function isLevel0(service: ImageService): boolean;
//#endregion
//#region src/image-3/profiles/supports.d.ts
declare function supports(service: ImageService, req: Partial<Profile> & {
  exactSize?: {
    width?: number;
    height?: number;
  };
}): readonly [false, "Not a valid image service"] | readonly [false, `Max area is ${number}`] | readonly [false, `Max width is ${number}`] | readonly [false, `Max height is ${number}`] | readonly [false, `Missing features: ${string}`] | readonly [false, `Missing formats: ${string}`] | readonly [false, `Missing qualities: ${string}`] | readonly [true];
//#endregion
//#region src/image-3/profiles/supports-custom-sizes.d.ts
declare function supportsCustomSizes(service: ImageService): boolean;
//#endregion
//#region src/image-3/profiles/image-service-supports-format.d.ts
declare function imageServiceSupportsFormat(imageService: ImageService, format: string): readonly [false, "Not a valid image service"] | readonly [false, `Max area is ${number}`] | readonly [false, `Max width is ${number}`] | readonly [false, `Max height is ${number}`] | readonly [false, `Missing features: ${string}`] | readonly [false, `Missing formats: ${string}`] | readonly [false, `Missing qualities: ${string}`] | readonly [true];
//#endregion
//#region src/image-3/profiles/image-service-supports-request.d.ts
declare function imageServiceSupportsRequest(imageService: ImageService, request: ImageServiceImageRequest): readonly [true] | boolean[] | readonly [false, "Not a valid image service" | `Max area is ${number}` | `Max width is ${number}` | `Max height is ${number}` | `Missing features: ${string}` | `Missing formats: ${string}` | `Missing qualities: ${string}`];
//#endregion
//#region src/image-3/serialize/image-service-request-to-string.d.ts
declare function imageServiceRequestToString(req: ImageServiceImageRequest, service?: ImageService): string;
//#endregion
//#region src/image-3/serialize/image-service-request-info.d.ts
declare function imageServiceRequestInfo(req: ImageServiceImageRequest, service?: ImageService): string;
//#endregion
//#region src/image-3/serialize/region-parameter-to-string.d.ts
declare function regionParameterToString({
  x,
  y,
  w,
  h,
  full,
  square,
  percent
}: RegionParameter): string;
//#endregion
//#region src/image-3/serialize/rotation-parameter-to-string.d.ts
declare function rotationParameterToString(rotationParameter: RotationParameter): string;
//#endregion
//#region src/image-3/serialize/size-parameter-to-string.d.ts
declare function sizeParameterToString({
  max,
  percentScale,
  upscaled,
  confined,
  width,
  height,
  serialiseAsFull,
  version
}: SizeParameter): string;
//#endregion
//#region src/image-3/utilities/canonical-service-url.d.ts
/**
 * Get canonical service url
 * Ensures an image service id contains the /info.json on the end of it.
 *
 * @param serviceId
 */
declare function canonicalServiceUrl(serviceId: string): string;
//#endregion
//#region src/image-3/utilities/create-image-service-request.d.ts
declare function createImageServiceRequest(imageService: ImageService): ImageServiceImageRequest;
//#endregion
//#region src/image-3/utilities/extract-fixed-size-scales.d.ts
/**
 * Extract fixed size scales
 *
 * Given a source width and height and a list of sizes of that same image,
 * it will return an ordered list of scales.
 *
 * @param width
 * @param height
 * @param sizes
 */
declare function extractFixedSizeScales(width: number, height: number, sizes: ImageSize[]): number[];
//#endregion
//#region src/image-3/utilities/fixed-sizes-from-scales.d.ts
/**
 * Fixed sizes from scales.
 *
 * Given a width and height of an image and a list of scales, this will return
 * an ordered list of widths and heights of the image at those scales.
 *
 * @param width
 * @param height
 * @param scales
 */
declare function fixedSizesFromScales(width: number, height: number, scales: number[]): ImageSize[];
//#endregion
//#region src/image-3/utilities/get-id.d.ts
declare function getId(resource: any): any;
//#endregion
//#region src/image-3/utilities/get-image-service-level.d.ts
declare function getImageServiceLevel(service: ImageService): null | number;
//#endregion
//#region src/image-3/utilities/get-image-services.d.ts
/**
 * Given a resource, will return only the image services on that resource.
 *
 * @param resource
 */
declare function getImageServices(resource: {
  service?: Array<Service>;
}): ImageService[];
//#endregion
//#region src/image-3/utilities/get-type.d.ts
declare function getType(resource: any): any;
//#endregion
//#region src/image-3/utilities/identify-image-server.d.ts
/**
 * Get image server from ID.
 *
 * Normalises image service URLs to extract identity of the image server.
 *
 * @param url
 */
declare function identifyImageServer(url: string): string;
//#endregion
//#region src/image-3/utilities/is-image-service.d.ts
declare function isImageService(service: any): service is ImageService;
//#endregion
//#region src/image-3/utilities/is-image-service-level.d.ts
declare function isImageServiceLevel(level: 0 | 1 | 2, imageService?: ImageService): boolean;
//#endregion
export { ExtraFeature, IIIF_1_IMAGE_LEVEL_0, IIIF_1_IMAGE_LEVEL_0_PROFILE, IIIF_1_IMAGE_LEVEL_1, IIIF_1_IMAGE_LEVEL_1_PROFILE, IIIF_1_IMAGE_LEVEL_2, IIIF_1_IMAGE_LEVEL_2_PROFILE, IIIF_2_IMAGE_LEVEL_0, IIIF_2_IMAGE_LEVEL_0_NO_JSON, IIIF_2_IMAGE_LEVEL_0_PROFILE, IIIF_2_IMAGE_LEVEL_1, IIIF_2_IMAGE_LEVEL_1_NO_JSON, IIIF_2_IMAGE_LEVEL_1_PROFILE, IIIF_2_IMAGE_LEVEL_2, IIIF_2_IMAGE_LEVEL_2_NO_JSON, IIIF_2_IMAGE_LEVEL_2_PROFILE, IIIF_3_IMAGE_LEVEL_0, IIIF_3_IMAGE_LEVEL_1, IIIF_3_IMAGE_LEVEL_2, ImageServiceImageRequest, Profile, RegionParameter, RotationParameter, STANFORD_IIIF_1_IMAGE_COMPLIANCE_0, STANFORD_IIIF_1_IMAGE_COMPLIANCE_1, STANFORD_IIIF_1_IMAGE_COMPLIANCE_2, STANFORD_IIIF_1_IMAGE_CONFORMANCE_0, STANFORD_IIIF_1_IMAGE_CONFORMANCE_1, STANFORD_IIIF_1_IMAGE_CONFORMANCE_2, STANFORD_IIIF_IMAGE_COMPLIANCE_0, STANFORD_IIIF_IMAGE_COMPLIANCE_1, STANFORD_IIIF_IMAGE_COMPLIANCE_2, STANFORD_IIIF_IMAGE_CONFORMANCE_0, STANFORD_IIIF_IMAGE_CONFORMANCE_1, STANFORD_IIIF_IMAGE_CONFORMANCE_2, SizeParameter, canonicalServiceUrl, combineProfiles, createImageServiceRequest, extraFeatures, extractFixedSizeScales, fixedSizesFromScales, getId, getImageServiceLevel, getImageServices, getType, identifyImageServer, imageServiceProfiles, imageServiceRequestInfo, imageServiceRequestToString, imageServiceSupportsFormat, imageServiceSupportsRequest, isImageService, isImageServiceLevel, isLevel0, level0, level0Support, level1, level1Support, level2, level2Support, levelToProfile, onlyLevel0, parseImageServerFromId, parseImageServiceRequest, parseImageServiceUrl, parseRegionParameter, parseRotationParameter, parseSizeParameter, regionParameterToString, rotationParameterToString, sizeParameterToString, supports, supportsCustomSizes };
//# sourceMappingURL=image-3.d.cts.map