import * as _iiif_presentation_30 from "@iiif/presentation-3";
import * as Presentation2 from "@iiif/presentation-2";
import { Annotation as Annotation$1, AnnotationList, Canvas as Canvas$1, ChoiceEmbeddedContent, Collection as Collection$1, CommonContentResource, ContentResource as ContentResource$1, DescriptiveProperties as DescriptiveProperties$1, Layer, LinkingProperties as LinkingProperties$1, Manifest as Manifest$1, OneOrMany, Range as Range$1, RightsProperties, Sequence, Service as Service$1, TraversableEntityTypes, Traversal, TraversalMap } from "@iiif/presentation-2";

//#region src/presentation-2/traverse.d.ts
declare const types: TraversableEntityTypes[];
type TraverseOptions = {
  convertPropsToArray: boolean;
  mergeMemberProperties: boolean;
  allowUndefinedReturn: boolean;
};
declare function identifyResource(resource: any): TraversableEntityTypes;
declare class Traverse<T extends {
  Collection: any;
  Manifest: any;
  Canvas: any;
  AnnotationList: any;
  Sequence: any;
  Annotation: any;
  ContentResource: any;
  Choice: any;
  Range: any;
  Service: any;
  Layer: any;
} = {
  Collection: Collection$1;
  Manifest: Manifest$1;
  Canvas: Canvas$1;
  AnnotationList: AnnotationList;
  Sequence: Sequence;
  Annotation: Annotation$1;
  ContentResource: CommonContentResource;
  Choice: ChoiceEmbeddedContent;
  Range: Range$1;
  Service: Service$1;
  Layer: Layer;
}> {
  private traversals;
  private options;
  constructor(traversals: Partial<TraversalMap>, options?: Partial<TraverseOptions>);
  static all(traversal: (resource: any) => any): Traverse<{
    Collection: Collection$1;
    Manifest: Manifest$1;
    Canvas: Canvas$1;
    AnnotationList: AnnotationList;
    Sequence: Sequence;
    Annotation: Annotation$1;
    ContentResource: CommonContentResource;
    Choice: ChoiceEmbeddedContent;
    Range: Range$1;
    Service: _iiif_presentation_30.Service;
    Layer: Layer;
  }>;
  traverseCollection(collection: Collection$1): T['Collection'];
  traverseCollectionItems(collection: Collection$1): Collection$1;
  traverseManifest(manifest: Manifest$1): T['Manifest'];
  traverseManifestItems(manifest: Manifest$1): Manifest$1;
  traverseSequence(sequence: Sequence): T['Sequence'];
  traverseSequenceItems(sequence: Sequence): Sequence;
  traverseCanvas(canvas: Canvas$1): T['Canvas'];
  traverseCanvasItems(canvas: Canvas$1): Canvas$1;
  traverseRange(range: Range$1): T['Range'];
  traverseRangeItems(range: Range$1): Range$1;
  traverseAnnotationList(annotationList: AnnotationList): T['AnnotationList'];
  traverseAnnotationListItems(annotationList: AnnotationList): AnnotationList;
  traverseAnnotation(annotation: Annotation$1): T['Annotation'];
  traverseAnnotationItems(annotation: Annotation$1): Annotation$1;
  traverseLayer(layer: Layer): T['Layer'];
  traverseLayerItems(layer: Layer): Layer;
  traverseChoice(choice: ChoiceEmbeddedContent): T['Choice'];
  traverseChoiceItems(choice: ChoiceEmbeddedContent): ChoiceEmbeddedContent;
  traverseService(service: Service$1): T['Service'];
  traverseContentResource(contentResource: CommonContentResource): T['ContentResource'];
  traverseUnknown(item: any): any;
  traverseImageResource(contentResource: OneOrMany<string | ContentResource$1>): any;
  traverseDescriptive<T extends Partial<DescriptiveProperties$1 & RightsProperties>>(resource: T): T;
  traverseOneOrMoreServices(allServices: OneOrMany<any>): T["Service"] | T["Service"][] | undefined;
  traverseLinking<T extends Partial<LinkingProperties$1>>(resource: T): T;
  traverseOneOrManyType<T, Return = T>(object: T | T[], traversals: Array<Traversal<T>>): Return;
  traverseType<T, Return = T>(object: T, traversals: Array<Traversal<T>>): Return;
}
//#endregion
//#region src/presentation-2/upgrader.d.ts
declare function convertLanguageMapping(inputLangProperty?: Presentation2.OneOrMany<Presentation2.LanguageProperty>, defaultLang?: string): _iiif_presentation_30.InternationalString;
declare function getProfile(profile: any | any[]): string | undefined;
declare function getTypeFromContext(inputContexts: string | string[]): string | undefined;
declare const presentation2to3: Traverse<{
  Collection: _iiif_presentation_30.Collection;
  Manifest: _iiif_presentation_30.Manifest;
  Canvas: _iiif_presentation_30.Canvas;
  AnnotationList: _iiif_presentation_30.AnnotationPage;
  Sequence: _iiif_presentation_30.Canvas[];
  Annotation: _iiif_presentation_30.Annotation;
  ContentResource: _iiif_presentation_30.ContentResource;
  Choice: _iiif_presentation_30.ChoiceBody;
  Range: _iiif_presentation_30.Range;
  Service: _iiif_presentation_30.Service;
  Layer: _iiif_presentation_30.AnnotationCollection;
}>;
declare function convertPresentation2(entity: any): _iiif_presentation_30.Manifest | _iiif_presentation_30.Collection;
//#endregion
export { Traverse, TraverseOptions, convertLanguageMapping, convertPresentation2, getProfile, getTypeFromContext, identifyResource, presentation2to3, types };
//# sourceMappingURL=upgrader-C45VROrD.d.cts.map