import { CompatVault } from "./compat-ClH8bhTh.js";
import { ChoiceBody, ContentResource, IIIFExternalWebResource, InternationalString, SpecificResource } from "@iiif/presentation-3";
import { AnnotationNormalized, CanvasNormalized } from "@iiif/presentation-3-normalized";

//#region src/painting-annotations/types.d.ts
interface SingleChoice {
  type: 'single-choice';
  label?: InternationalString;
  items: Array<{
    id: string;
    label?: InternationalString;
    selected?: true;
  }>;
}
interface ComplexChoice {
  type: 'complex-choice';
  items: SingleChoice[];
}
type ChoiceDescription = SingleChoice | ComplexChoice;
interface Paintables {
  choice: ChoiceDescription | null;
  allChoices: ComplexChoice | null;
  types: string[];
  items: Array<{
    type: string;
    resource: IIIFExternalWebResource | SpecificResource;
    annotationId: string;
    annotation: AnnotationNormalized;
    target: any;
    selector: any;
  }>;
}
//#endregion
//#region src/painting-annotations/helper.d.ts
declare function createPaintingAnnotationsHelper(vault?: CompatVault): {
  getAllPaintingAnnotations: (canvasOrId: string | CanvasNormalized | undefined | null) => AnnotationNormalized[];
  getPaintables: (paintingAnnotationsOrCanvas: string | CanvasNormalized | AnnotationNormalized[], enabledChoices?: string[]) => Paintables;
  extractChoices: (paintingAnnotationsOrCanvas: string | CanvasNormalized | AnnotationNormalized[]) => ChoiceDescription | null;
};
//#endregion
//#region src/painting-annotations/parse-specific-resource.d.ts
declare function parseSpecificResource(resource: ContentResource): [ContentResource | ChoiceBody, {
  selector?: any;
}];
//#endregion
export { ChoiceDescription, ComplexChoice, Paintables, SingleChoice, createPaintingAnnotationsHelper, parseSpecificResource };
//# sourceMappingURL=painting-annotations-EeYudVuW.d.ts.map