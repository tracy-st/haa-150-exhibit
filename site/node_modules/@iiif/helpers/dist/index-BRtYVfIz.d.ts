import { AllActions, BatchAction, IIIFStore } from "./batch-actions-BdZYnFZU.js";
import { StoreApi } from "zustand/vanilla";

//#region src/vault/store/index.d.ts
declare const reducers: (state: any, action: any) => any;
type CreateStoreOptions = {
  enableDevtools?: boolean;
  iiifStoreName?: string;
  customReducers?: any;
  defaultState?: any;
};
type VaultStoreState = StoreApi<IIIFStore & {
  dispatch: (action: AllActions | BatchAction) => void;
}> & {
  dispatch: (action: AllActions | BatchAction) => void;
};
declare function createStore(options?: CreateStoreOptions): Omit<Omit<Omit<StoreApi<Omit<IIIFStore, "dispatch"> & {
  dispatch: (a: AllActions | BatchAction) => AllActions | BatchAction;
}>, "subscribe"> & {
  subscribe: {
    (listener: (selectedState: Omit<IIIFStore, "dispatch"> & {
      dispatch: (a: AllActions | BatchAction) => AllActions | BatchAction;
    }, previousSelectedState: Omit<IIIFStore, "dispatch"> & {
      dispatch: (a: AllActions | BatchAction) => AllActions | BatchAction;
    }) => void): () => void;
    <U>(selector: (state: Omit<IIIFStore, "dispatch"> & {
      dispatch: (a: AllActions | BatchAction) => AllActions | BatchAction;
    }) => U, listener: (selectedState: U, previousSelectedState: U) => void, options?: {
      equalityFn?: ((a: U, b: U) => boolean) | undefined;
      fireImmediately?: boolean | undefined;
    } | undefined): () => void;
  };
}, "setState"> & {
  setState<A extends string | {
    type: string;
  }>(partial: (Omit<IIIFStore, "dispatch"> & {
    dispatch: (a: AllActions | BatchAction) => AllActions | BatchAction;
  }) | Partial<Omit<IIIFStore, "dispatch"> & {
    dispatch: (a: AllActions | BatchAction) => AllActions | BatchAction;
  }> | ((state: Omit<IIIFStore, "dispatch"> & {
    dispatch: (a: AllActions | BatchAction) => AllActions | BatchAction;
  }) => (Omit<IIIFStore, "dispatch"> & {
    dispatch: (a: AllActions | BatchAction) => AllActions | BatchAction;
  }) | Partial<Omit<IIIFStore, "dispatch"> & {
    dispatch: (a: AllActions | BatchAction) => AllActions | BatchAction;
  }>), replace?: boolean | undefined, action?: A | undefined): void;
}, keyof {
  dispatch: (a: A_1) => A_1;
  dispatchFromDevtools: true;
}> & {
  dispatch: (a: AllActions | BatchAction) => AllActions | BatchAction;
  dispatchFromDevtools: true;
};
type VaultZustandStore = ReturnType<typeof createStore>;
//#endregion
export { VaultStoreState, VaultZustandStore, createStore, reducers };
//# sourceMappingURL=index-BRtYVfIz.d.ts.map