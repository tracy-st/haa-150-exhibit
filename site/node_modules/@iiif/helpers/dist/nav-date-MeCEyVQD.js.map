{"version":3,"file":"nav-date-MeCEyVQD.js","names":["items: T[]","centuries: DateNavigationCentury[]"],"sources":["../src/nav-date.ts"],"sourcesContent":["// Parse nav date fields and create a navigation tree.\n// Decades, years, months, and days are supported.\n// Manifests or Canvases can have a property like:\n// \"navDate\": \"1986-01-01T00:00:00+00:00\"\n// \"navDate\": \"1987-01-01T00:00:00+00:00\"\n\nimport { Collection, InternationalString, Manifest } from '@iiif/presentation-3';\nimport { CompatVault } from './compat';\nimport { CollectionNormalized, ManifestNormalized } from '@iiif/presentation-3-normalized';\n\nexport interface DateNavigationResource {\n  id: string;\n  type: 'Manifest' | 'Canvas';\n  label: InternationalString;\n  navDate: string;\n}\n\nexport interface DateNavigationDay {\n  id: string;\n  type: 'day';\n  count: number;\n  label: InternationalString;\n  day: number;\n  items: Array<DateNavigationResource>;\n}\n\nexport interface DateNavigationMonth {\n  id: string;\n  type: 'month';\n  month: number;\n  count: number;\n  label: InternationalString;\n  items: Array<DateNavigationDay>;\n}\n\nexport interface DateNavigationYear {\n  id: string;\n  type: 'year';\n  year: number;\n  count: number;\n  label: InternationalString;\n  items: Array<DateNavigationMonth>;\n}\n\nexport interface DateNavigationDecade {\n  id: string;\n  type: 'decade';\n  yearStart: number;\n  yearEnd: number;\n  label: InternationalString;\n  count: number;\n  items: Array<DateNavigationYear>;\n}\n\nexport interface DateNavigationCentury {\n  id: string;\n  type: 'century';\n  yearStart: number;\n  yearEnd: number;\n  label: InternationalString;\n  count: number;\n  items: Array<DateNavigationDecade>;\n}\n\nexport type DateNavigationTypes =\n  | DateNavigationCentury\n  | DateNavigationDecade\n  | DateNavigationYear\n  | DateNavigationMonth\n  | DateNavigationDay;\n\nexport function createDateNavigation<T extends DateNavigationTypes, Type = T['type']>(\n  vault: CompatVault,\n  manifestOrCollection: Manifest | Collection | ManifestNormalized | CollectionNormalized | string,\n  inputType?: Type\n) {\n  const type = inputType || 'century';\n  const items: T[] = [];\n\n  const centuries: DateNavigationCentury[] = [];\n\n  const resource = vault.get<any>(manifestOrCollection) as {\n    label?: InternationalString;\n    id: string;\n    items: Array<{\n      id: string;\n      type: string;\n      label?: InternationalString;\n      navDate?: string;\n    }>;\n  };\n\n  if (!resource.items) {\n    return items;\n  }\n\n  for (const item of resource.items) {\n    if (item.navDate) {\n      const d = new Date(item.navDate);\n      const year = d.getFullYear();\n      const month = d.getMonth();\n      const day = d.getDate();\n      const decade = Math.floor(year / 10) * 10;\n      const century = Math.floor(year / 100) * 100;\n      let centuryItem = centuries.find((i) => i.yearStart === century);\n      if (!centuryItem) {\n        centuryItem = {\n          id: `${resource.id}/century/${century}`,\n          label: { en: [`${century} - ${century + 99}`] },\n          type: 'century',\n          yearStart: century,\n          yearEnd: century + 99,\n          count: 1,\n          items: [],\n        };\n        if (type === 'century') {\n          items.push(centuryItem as T);\n        }\n        centuries.push(centuryItem);\n      } else {\n        centuryItem.count++;\n      }\n\n      let decadeItem = centuryItem.items.find((i) => i.yearStart === decade);\n      if (!decadeItem) {\n        decadeItem = {\n          id: `${resource.id}/decade/${decade}`,\n          label: { en: [`${decade} - ${decade + 9}`] },\n          type: 'decade',\n          yearStart: decade,\n          yearEnd: decade + 9,\n          count: 1,\n          items: [],\n        };\n        centuryItem.items.push(decadeItem);\n        if (type === 'decade') {\n          items.push(decadeItem as T);\n        }\n      } else {\n        decadeItem.count++;\n      }\n      let yearItem = decadeItem.items.find((i) => i.year === year);\n      if (!yearItem) {\n        yearItem = {\n          id: `${resource.id}/year/${year}`,\n          label: { en: [`${year}`] },\n          type: 'year',\n          year: year,\n          count: 1,\n          items: [],\n        };\n        decadeItem.items.push(yearItem);\n        if (type === 'year') {\n          items.push(yearItem as T);\n        }\n      } else {\n        yearItem.count++;\n      }\n      let monthItem = yearItem.items.find((i) => i.month === month);\n      if (!monthItem) {\n        monthItem = {\n          id: `${resource.id}/month/${year}/${month + 1}`,\n          // Month as string\n          label: {\n            en: [\n              type === 'month'\n                ? `${d.toLocaleString('default', { month: 'long' })} ${year}`\n                : `${d.toLocaleString('default', { month: 'long' })}`,\n            ],\n          },\n          type: 'month',\n          month: month,\n          count: 1,\n          items: [],\n        };\n        yearItem.items.push(monthItem);\n        if (type === 'month') {\n          items.push(monthItem as T);\n        }\n      } else {\n        monthItem.count++;\n      }\n      let dayItem = monthItem.items.find((i) => i.day === day);\n      if (!dayItem) {\n        dayItem = {\n          id: `${resource.id}/day/${year}/${month + 1}/${day}`,\n          label: { en: [`${d.toDateString()}`] },\n          type: 'day',\n          day: day,\n          count: 1,\n          items: [],\n        };\n        monthItem.items.push(dayItem);\n        if (type === 'day') {\n          items.push(dayItem as T);\n        }\n      } else {\n        dayItem.count++;\n      }\n      dayItem.items.push({\n        id: item.id,\n        type: item.type as any,\n        label: item.label || { en: [`${year}-${month + 1}-${day}`] },\n        navDate: item.navDate,\n      });\n    }\n  }\n\n  if (!inputType) {\n    // Filter until there's more than one per level.\n    let autoItem = items;\n    while (autoItem.length === 1) {\n      autoItem = autoItem[0].items as T[];\n    }\n    return autoItem;\n  }\n\n  return items;\n}\n"],"mappings":"AAuEA,SAAgB,EACd,EACA,EACA,EACA,CACA,IAAM,EAAO,GAAa,UACpBA,EAAa,GAEbC,EAAqC,GAErC,EAAW,EAAM,IAAS,GAWhC,GAAI,CAAC,EAAS,MACZ,OAAO,EAGT,IAAK,IAAM,KAAQ,EAAS,MAC1B,GAAI,EAAK,QAAS,CAChB,IAAM,EAAI,IAAI,KAAK,EAAK,SAClB,EAAO,EAAE,cACT,EAAQ,EAAE,WACV,EAAM,EAAE,UACR,EAAS,KAAK,MAAM,EAAO,IAAM,GACjC,EAAU,KAAK,MAAM,EAAO,KAAO,IACrC,EAAc,EAAU,KAAM,GAAM,EAAE,YAAc,GACnD,EAeH,EAAY,SAdZ,EAAc,CACZ,GAAI,GAAG,EAAS,GAAG,WAAW,IAC9B,MAAO,CAAE,GAAI,CAAC,GAAG,EAAQ,KAAK,EAAU,OACxC,KAAM,UACN,UAAW,EACX,QAAS,EAAU,GACnB,MAAO,EACP,MAAO,IAEL,IAAS,WACX,EAAM,KAAK,GAEb,EAAU,KAAK,IAKjB,IAAI,EAAa,EAAY,MAAM,KAAM,GAAM,EAAE,YAAc,GAC1D,EAeH,EAAW,SAdX,EAAa,CACX,GAAI,GAAG,EAAS,GAAG,UAAU,IAC7B,MAAO,CAAE,GAAI,CAAC,GAAG,EAAO,KAAK,EAAS,MACtC,KAAM,SACN,UAAW,EACX,QAAS,EAAS,EAClB,MAAO,EACP,MAAO,IAET,EAAY,MAAM,KAAK,GACnB,IAAS,UACX,EAAM,KAAK,IAKf,IAAI,EAAW,EAAW,MAAM,KAAM,GAAM,EAAE,OAAS,GAClD,EAcH,EAAS,SAbT,EAAW,CACT,GAAI,GAAG,EAAS,GAAG,QAAQ,IAC3B,MAAO,CAAE,GAAI,CAAC,GAAG,MACjB,KAAM,OACA,OACN,MAAO,EACP,MAAO,IAET,EAAW,MAAM,KAAK,GAClB,IAAS,QACX,EAAM,KAAK,IAKf,IAAI,EAAY,EAAS,MAAM,KAAM,GAAM,EAAE,QAAU,GAClD,EAqBH,EAAU,SApBV,EAAY,CACV,GAAI,GAAG,EAAS,GAAG,SAAS,EAAK,GAAG,EAAQ,IAE5C,MAAO,CACL,GAAI,CACF,IAAS,QACL,GAAG,EAAE,eAAe,UAAW,CAAE,MAAO,SAAU,GAAG,IACrD,GAAG,EAAE,eAAe,UAAW,CAAE,MAAO,aAGhD,KAAM,QACC,QACP,MAAO,EACP,MAAO,IAET,EAAS,MAAM,KAAK,GAChB,IAAS,SACX,EAAM,KAAK,IAKf,IAAI,EAAU,EAAU,MAAM,KAAM,GAAM,EAAE,MAAQ,GAC/C,EAcH,EAAQ,SAbR,EAAU,CACR,GAAI,GAAG,EAAS,GAAG,OAAO,EAAK,GAAG,EAAQ,EAAE,GAAG,IAC/C,MAAO,CAAE,GAAI,CAAC,GAAG,EAAE,mBACnB,KAAM,MACD,MACL,MAAO,EACP,MAAO,IAET,EAAU,MAAM,KAAK,GACjB,IAAS,OACX,EAAM,KAAK,IAKf,EAAQ,MAAM,KAAK,CACjB,GAAI,EAAK,GACT,KAAM,EAAK,KACX,MAAO,EAAK,OAAS,CAAE,GAAI,CAAC,GAAG,EAAK,GAAG,EAAQ,EAAE,GAAG,MACpD,QAAS,EAAK,UAKpB,GAAI,CAAC,EAAW,CAEd,IAAI,EAAW,EACf,KAAO,EAAS,SAAW,GACzB,EAAW,EAAS,GAAG,MAEzB,OAAO,EAGT,OAAO"}