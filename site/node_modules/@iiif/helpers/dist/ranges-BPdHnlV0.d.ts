import { CompatVault } from "./compat-ClH8bhTh.js";
import { Canvas, InternationalString, Range, Reference, SpecificResource } from "@iiif/presentation-3";
import { CanvasNormalized, ManifestNormalized, RangeNormalized } from "@iiif/presentation-3-normalized";

//#region src/ranges.d.ts
declare function createRangeHelper(vault?: CompatVault): {
  findFirstCanvasFromRange: (range: RangeNormalized) => {
    type: "Canvas";
    id: string;
  } | null;
  findAllCanvasesInRange: (range: RangeNormalized) => {
    type: "Canvas";
    id: string;
  }[];
  findManifestSelectedRange: (manifest: ManifestNormalized, canvasId: string) => RangeNormalized | null;
  findSelectedRange: (range: RangeNormalized, canvasId: string) => RangeNormalized | null;
  rangesToTableOfContentsTree: (rangeRefs: RangeNormalized[], label?: InternationalString | null, options?: {
    showNoNav?: boolean;
  }) => RangeTableOfContentsNode | null;
  rangeToTableOfContentsTree: (rangeRef: RangeNormalized | Reference<'Range'>, options?: {
    showNoNav?: boolean;
  }) => RangeTableOfContentsNode | null;
  isContiguous: (rangeRef: RangeNormalized | Reference<'Range'>, canvasesRef: Canvas[] | CanvasNormalized[] | Reference<'Canvas'>[], options?: Partial<{
    allowGaps: boolean;
    allowSubset: boolean;
    detail?: boolean;
  }>) => [boolean, IsRangeContiguousDetail | null];
};
declare function findFirstCanvasFromRange(vault: CompatVault, range: RangeNormalized): null | Reference<'Canvas'>;
declare function findFirstCanvasFromRangeWithSelector(vault: CompatVault, range: RangeNormalized): null | SpecificResource<Reference<'Canvas'>>;
declare function findAllCanvasesInRange(vault: CompatVault, range: RangeNormalized): Array<Reference<'Canvas'>>;
declare function findManifestSelectedRange(vault: CompatVault, manifest: ManifestNormalized, canvasId: string): null | RangeNormalized;
declare function findSelectedRange(vault: CompatVault, range: RangeNormalized, canvasId: string): null | RangeNormalized;
interface RangeTableOfContentsNode {
  id: string;
  type: 'Canvas' | 'Range';
  label: InternationalString | null;
  resource?: SpecificResource;
  untitled?: boolean;
  isCanvasLeaf: boolean;
  isRangeLeaf: boolean;
  isVirtual?: boolean;
  isNoNav?: boolean;
  firstCanvas?: SpecificResource<Reference<'Canvas'>> | null;
  items?: Array<RangeTableOfContentsNode>;
}
declare function rangesToTableOfContentsTree(vault: CompatVault, rangeRefs: RangeNormalized[] | Range[] | Reference<'Range'>[], label?: InternationalString | null, options?: {
  showNoNav?: boolean;
}): RangeTableOfContentsNode | null;
declare function rangeToTableOfContentsTree(vault: CompatVault, rangeRef: undefined | null | Range | RangeNormalized | Reference<'Range'>, seenIds?: string[], options?: {
  showNoNav?: boolean;
}): RangeTableOfContentsNode | null;
type IsRangeContiguousDetail = {
  isContiguous: boolean;
  startIndex: number;
  endIndex: number;
  gaps: Array<{
    startIndex: number;
    endIndex: number;
    canvasIds: string[];
  }>;
  invalidRanges: Array<{
    id: string;
    reasons: string[];
  }>;
  invalidCanvases: string[];
  reason: string | null;
};
declare function isRangeContiguous(vault: CompatVault, rangeRef: Range | RangeNormalized | Reference<'Range'>, canvasesRef: Canvas[] | CanvasNormalized[] | Reference<'Canvas'>[], options?: Partial<{
  allowGaps: boolean;
  allowSubset: boolean;
  detail?: boolean;
}>): [boolean, IsRangeContiguousDetail | null];
//#endregion
export { RangeTableOfContentsNode, createRangeHelper, findAllCanvasesInRange, findFirstCanvasFromRange, findFirstCanvasFromRangeWithSelector, findManifestSelectedRange, findSelectedRange, isRangeContiguous, rangeToTableOfContentsTree, rangesToTableOfContentsTree };
//# sourceMappingURL=ranges-BPdHnlV0.d.ts.map