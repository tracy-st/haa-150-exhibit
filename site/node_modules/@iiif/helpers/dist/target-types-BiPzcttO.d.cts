import { ExternalWebResource, ImageApiSelector } from "@iiif/presentation-3";

//#region src/annotation-targets/selector-types.d.ts
type SvgShapeType = 'rect' | 'circle' | 'ellipse' | 'line' | 'polyline' | 'polygon' | 'path';
interface SupportedSelector {
  type: string;
  temporal?: {
    startTime: number;
    endTime?: number;
  };
  spatial?: {
    unit?: 'percent' | 'pixel';
    x: number;
    y: number;
    width?: number;
    height?: number;
  };
  rotation?: number;
  points?: [number, number][];
  svg?: string;
  svgShape?: SvgShapeType;
  style?: SelectorStyle;
  boxStyle?: BoxStyle;
}
type BoxStyle = _BoxStyle & {
  ':hover'?: _BoxStyle;
  ':active'?: _BoxStyle;
};
type _BoxStyle = Partial<{
  backgroundColor: string;
  opacity: number;
  boxShadow: string;
  borderColor: string;
  borderWidth: string;
  borderStyle: string;
  outlineColor: string;
  outlineWidth: string;
  outlineOffset: string;
  outlineStyle: string;
  border: string;
  outline: string;
  background: string;
}>;
interface SelectorStyle {
  fill?: string;
  fillOpacity?: number;
  stroke?: string;
  strokeOpacity?: number;
  strokeWidth?: string;
  strokeDasharray?: string;
}
interface BoxSelector extends SupportedSelector {
  type: 'BoxSelector';
  spatial: {
    unit?: 'percent' | 'pixel';
    x: number;
    y: number;
    width: number;
    height: number;
  };
  rotation?: number;
}
interface PointSelector extends SupportedSelector {
  type: 'PointSelector';
  spatial: {
    x: number;
    y: number;
  };
  rotation?: number;
}
interface SvgSelector extends SupportedSelector {
  type: 'SvgSelector';
  svg: string;
  svgShape?: SvgShapeType;
  points?: [number, number][];
  spatial?: {
    unit: 'pixel';
    x: number;
    y: number;
    width: number;
    height: number;
  };
  rotation?: number;
}
interface TemporalSelector extends SupportedSelector {
  type: 'TemporalSelector';
  temporal: {
    startTime: number;
    endTime?: number;
  };
}
interface RotationSelector extends SupportedSelector {
  type: 'RotationSelector';
  rotation: number;
}
interface TemporalBoxSelector extends SupportedSelector {
  type: 'TemporalBoxSelector';
  spatial: {
    unit?: 'percent' | 'pixel';
    x: number;
    y: number;
    width: number;
    height: number;
  };
  rotation?: number;
  temporal: {
    startTime: number;
    endTime?: number;
  };
}
type SupportedSelectors = TemporalSelector | BoxSelector | TemporalBoxSelector | PointSelector | SvgSelector | RotationSelector;
type ParsedSelector = {
  selector: SupportedSelectors | null;
  selectors: SupportedSelectors[];
  iiifRenderingHints?: ImageApiSelector;
};
//#endregion
//#region src/annotation-targets/target-types.d.ts
type SupportedTarget = {
  type: 'SpecificResource';
  source: ExternalWebResource | {
    id: string;
    type: 'Unknown' | 'Canvas' | 'Range' | 'Manifest';
    partOf?: Array<{
      id: string;
      type: string;
    }>;
  };
  purpose?: string;
  imageServiceHints?: {
    size?: string;
    rotation?: string;
    quality?: string;
    format?: string;
  };
  selector: SupportedSelectors | null;
  selectors: SupportedSelectors[];
};
//#endregion
export { BoxSelector, BoxStyle, ParsedSelector, PointSelector, RotationSelector, SelectorStyle, SupportedSelector, SupportedSelectors, SupportedTarget, SvgSelector, SvgShapeType, TemporalBoxSelector, TemporalSelector };
//# sourceMappingURL=target-types-BiPzcttO.d.cts.map