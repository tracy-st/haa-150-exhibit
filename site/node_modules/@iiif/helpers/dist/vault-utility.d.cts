import { Vault } from "./vault-B8SBWpct.cjs";
import { AllActions, Entities, IIIFStore, NormalizedEntity } from "./batch-actions-D7V5t4hj.cjs";
import "./index-CFeXWhmD.cjs";
import { Reference } from "@iiif/presentation-3";

//#region src/vault/utility/action-list-from-resource.d.ts
declare const actionListFromResource: (id: string, response: unknown) => AllActions[];
//#endregion
//#region src/vault/utility/are-inputs-equal.d.ts
declare function areInputsEqual(newInputs: readonly unknown[] | unknown, lastInputs: readonly unknown[] | unknown): boolean;
//#endregion
//#region src/vault/utility/create-fetch-helper.d.ts
declare function createFetchHelper<T>(vault: Vault, fetcher: (url: string, options?: T) => any | Promise<any>, {
  waitTimeout
}?: {
  waitTimeout?: number;
}): (url: string, options?: T, mapper?: (r: any) => any) => NormalizedEntity | undefined | Promise<NormalizedEntity | undefined>;
//#endregion
//#region src/vault/utility/get-default-entities.d.ts
declare function getDefaultEntities(): Entities;
//#endregion
//#region src/vault/utility/resolve-if-exists.d.ts
declare function resolveIfExists<T extends NormalizedEntity>(state: IIIFStore, url: string, parent?: any): T | undefined;
//#endregion
//#region src/vault/utility/resolve-list.d.ts
declare function resolveList<T extends NormalizedEntity>(state: IIIFStore, items: Reference<T>[]): Array<NormalizedEntity>;
//#endregion
export { actionListFromResource, areInputsEqual, createFetchHelper, getDefaultEntities, resolveIfExists, resolveList };
//# sourceMappingURL=vault-utility.d.cts.map