import { CompatVault } from "./compat-ClH8bhTh.js";
import { FixedSizeImage, FixedSizeImageService, ImageCandidate, ImageCandidateRequest, ImageServiceLoader, UnknownSizeImage, VariableSizeImage } from "./image-service-Beuc1aSY.js";
import { CollectionItemSchemas, ContentResource, Reference } from "@iiif/presentation-3";
import { AnnotationNormalized, AnnotationPageNormalized, CanvasNormalized, CollectionNormalized, ManifestNormalized } from "@iiif/presentation-3-normalized";

//#region src/thumbnail.d.ts
declare const imageServiceLoader: ImageServiceLoader;
type ThumbnailInput = string | Reference<CollectionItemSchemas> | Reference<'Collection'> | Reference<'Manifest'> | Reference<'Canvas'> | Reference<'Annotation'> | Reference<'AnnotationPage'> | Reference<'ContentResource'> | CollectionNormalized | ManifestNormalized | CanvasNormalized | AnnotationNormalized | AnnotationPageNormalized | ContentResource | undefined;
type ThumbnailOutput = Promise<{
  best: null | undefined | FixedSizeImage | FixedSizeImageService | VariableSizeImage | UnknownSizeImage;
  fallback: Array<ImageCandidate>;
  log: string[];
}>;
declare function getThumbnail(input: ThumbnailInput, {
  vault,
  dereference,
  ...options
}?: ImageCandidateRequest & {
  vault?: CompatVault;
  dereference?: boolean;
}): ThumbnailOutput;
declare function createThumbnailHelper(vault?: CompatVault, dependencies?: {
  imageServiceLoader?: ImageServiceLoader;
}): {
  getBestThumbnailAtSize: (input: ThumbnailInput, request: ImageCandidateRequest, dereference?: boolean, candidates?: Array<ImageCandidate>, dimensions?: {
    width: number;
    height: number;
  }) => ThumbnailOutput;
};
//#endregion
export { ThumbnailInput, ThumbnailOutput, createThumbnailHelper, getThumbnail, imageServiceLoader };
//# sourceMappingURL=thumbnail-C07zJI7J.d.ts.map