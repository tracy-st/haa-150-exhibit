import { Annotation, AnnotationCollection, AnnotationPage, Canvas, Collection, ContentResource, InternationalString, Manifest, ResourceProvider, Selector, Service, SpecificResource } from "@iiif/presentation-3";
import { AnnotationNormalized, AnnotationPageNormalized, CanvasNormalized, CollectionNormalized, ManifestNormalized, RangeNormalized, ResourceProviderNormalized, ServiceNormalized } from "@iiif/presentation-3-normalized";
import * as typesafe_actions1 from "typesafe-actions";
import { ActionType, PayloadAction } from "typesafe-actions";

//#region src/vault/actions/entity-actions.d.ts
declare const IMPORT_ENTITIES = "@iiif/IMPORT_ENTITIES";
declare const MODIFY_ENTITY_FIELD = "@iiif/MODIFY_ENTITY_FIELD";
declare const REORDER_ENTITY_FIELD = "@iiif/REORDER_ENTITY_FIELD";
declare const MOVE_ENTITY = "@iiif/MOVE_ENTITY";
declare const MOVE_ENTITIES = "@iiif/MOVE_ENTITIES";
declare const ADD_REFERENCE = "@iiif/ADD_REFERENCE";
declare const UPDATE_REFERENCE = "@iiif/UPDATE_REFERENCE";
declare const REMOVE_REFERENCE = "@iiif/REMOVE_REFERENCE";
declare const ADD_METADATA = "@iiif/ADD_METADATA";
declare const REMOVE_METADATA = "@iiif/REMOVE_METADATA";
declare const UPDATE_METADATA = "@iiif/UPDATE_METADATA";
declare const REORDER_METADATA = "@iiif/REORDER_METADATA";
declare const importEntities: typesafe_actions1.PayloadActionCreator<"@iiif/IMPORT_ENTITIES", {
  entities: Partial<Entities>;
}>;
declare const modifyEntityField: typesafe_actions1.PayloadActionCreator<"@iiif/MODIFY_ENTITY_FIELD", {
  type: keyof Entities;
  id: string;
  key: string;
  value: any;
}>;
declare const reorderEntityField: typesafe_actions1.PayloadActionCreator<"@iiif/REORDER_ENTITY_FIELD", {
  type: keyof Entities;
  id: string;
  key: string;
  startIndex: number;
  endIndex: number;
}>;
declare const moveEntity: typesafe_actions1.PayloadActionCreator<"@iiif/MOVE_ENTITY", {
  subject: {
    id: string;
    type: keyof Entities;
    index?: number;
  };
  from: {
    id: string;
    type: keyof Entities;
    key: string;
  };
  to: {
    id: string;
    type: keyof Entities;
    key: string;
    index?: number;
  };
}>;
declare const moveEntities: typesafe_actions1.PayloadActionCreator<"@iiif/MOVE_ENTITIES", {
  subjects: {
    type: 'list';
    items: Array<{
      id: string;
      type: keyof Entities;
      index?: number;
    }>;
  } | {
    type: 'slice';
    startIndex: number;
    length: number;
  };
  from: {
    id: string;
    type: keyof Entities;
    key: string;
  };
  to: {
    id: string;
    type: keyof Entities;
    key: string;
    index?: number;
  };
}>;
declare const addReference: typesafe_actions1.PayloadActionCreator<"@iiif/ADD_REFERENCE", {
  type: keyof Entities;
  id: string;
  key: string;
  index?: number | undefined;
  reference: SpecificResource | ({
    id: string;
    type: string;
  } & any);
}>;
declare const removeReference: typesafe_actions1.PayloadActionCreator<"@iiif/REMOVE_REFERENCE", {
  type: keyof Entities;
  id: string;
  key: string;
  index?: number | undefined;
  reference: SpecificResource | ({
    id: string;
    type: string;
  } & any);
}>;
declare const updateReference: typesafe_actions1.PayloadActionCreator<"@iiif/UPDATE_REFERENCE", {
  type: keyof Entities;
  id: string;
  key: string;
  index: number;
  reference: SpecificResource | ({
    id: string;
    type: string;
  } & any);
}>;
declare const addMetadata: typesafe_actions1.PayloadActionCreator<"@iiif/ADD_METADATA", {
  id: string;
  type: keyof Entities;
  beforeIndex?: number | undefined;
  label: InternationalString;
  value: InternationalString;
}>;
declare const updateMetadata: typesafe_actions1.PayloadActionCreator<"@iiif/UPDATE_METADATA", {
  id: string;
  type: keyof Entities;
  atIndex?: number | undefined;
  label: InternationalString;
  value: InternationalString;
}>;
declare const removeMetadata: typesafe_actions1.PayloadActionCreator<"@iiif/REMOVE_METADATA", {
  id: string;
  type: keyof Entities;
  atIndex: number;
}>;
declare const reorderMetadata: typesafe_actions1.PayloadActionCreator<"@iiif/REORDER_METADATA", {
  id: string;
  type: keyof Entities;
  startIndex: number;
  endIndex: number;
}>;
declare const entityActions: {
  importEntities: typesafe_actions1.PayloadActionCreator<"@iiif/IMPORT_ENTITIES", {
    entities: Partial<Entities>;
  }>;
  modifyEntityField: typesafe_actions1.PayloadActionCreator<"@iiif/MODIFY_ENTITY_FIELD", {
    type: keyof Entities;
    id: string;
    key: string;
    value: any;
  }>;
  reorderEntityField: typesafe_actions1.PayloadActionCreator<"@iiif/REORDER_ENTITY_FIELD", {
    type: keyof Entities;
    id: string;
    key: string;
    startIndex: number;
    endIndex: number;
  }>;
  addReference: typesafe_actions1.PayloadActionCreator<"@iiif/ADD_REFERENCE", {
    type: keyof Entities;
    id: string;
    key: string;
    index?: number | undefined;
    reference: SpecificResource | ({
      id: string;
      type: string;
    } & any);
  }>;
  removeReference: typesafe_actions1.PayloadActionCreator<"@iiif/REMOVE_REFERENCE", {
    type: keyof Entities;
    id: string;
    key: string;
    index?: number | undefined;
    reference: SpecificResource | ({
      id: string;
      type: string;
    } & any);
  }>;
  updateReference: typesafe_actions1.PayloadActionCreator<"@iiif/UPDATE_REFERENCE", {
    type: keyof Entities;
    id: string;
    key: string;
    index: number;
    reference: SpecificResource | ({
      id: string;
      type: string;
    } & any);
  }>;
  addMetadata: typesafe_actions1.PayloadActionCreator<"@iiif/ADD_METADATA", {
    id: string;
    type: keyof Entities;
    beforeIndex?: number | undefined;
    label: InternationalString;
    value: InternationalString;
  }>;
  removeMetadata: typesafe_actions1.PayloadActionCreator<"@iiif/REMOVE_METADATA", {
    id: string;
    type: keyof Entities;
    atIndex: number;
  }>;
  updateMetadata: typesafe_actions1.PayloadActionCreator<"@iiif/UPDATE_METADATA", {
    id: string;
    type: keyof Entities;
    atIndex?: number | undefined;
    label: InternationalString;
    value: InternationalString;
  }>;
  reorderMetadata: typesafe_actions1.PayloadActionCreator<"@iiif/REORDER_METADATA", {
    id: string;
    type: keyof Entities;
    startIndex: number;
    endIndex: number;
  }>;
  moveEntity: typesafe_actions1.PayloadActionCreator<"@iiif/MOVE_ENTITY", {
    subject: {
      id: string;
      type: keyof Entities;
      index?: number;
    };
    from: {
      id: string;
      type: keyof Entities;
      key: string;
    };
    to: {
      id: string;
      type: keyof Entities;
      key: string;
      index?: number;
    };
  }>;
  moveEntities: typesafe_actions1.PayloadActionCreator<"@iiif/MOVE_ENTITIES", {
    subjects: {
      type: 'list';
      items: Array<{
        id: string;
        type: keyof Entities;
        index?: number;
      }>;
    } | {
      type: 'slice';
      startIndex: number;
      length: number;
    };
    from: {
      id: string;
      type: keyof Entities;
      key: string;
    };
    to: {
      id: string;
      type: keyof Entities;
      key: string;
      index?: number;
    };
  }>;
};
type EntityActions = ActionType<typeof entityActions>;
//#endregion
//#region src/vault/actions/mapping-actions.d.ts
declare const ADD_MAPPING = "@iiif/ADD_MAPPING";
declare const ADD_MAPPINGS = "@iiif/ADD_MAPPINGS";
declare const addMapping: typesafe_actions1.PayloadActionCreator<"@iiif/ADD_MAPPING", {
  id: string;
  type: string;
}>;
declare const addMappings: typesafe_actions1.PayloadActionCreator<"@iiif/ADD_MAPPINGS", {
  mapping: {
    [id: string]: string;
  };
}>;
declare const mappingActions: {
  addMapping: typesafe_actions1.PayloadActionCreator<"@iiif/ADD_MAPPING", {
    id: string;
    type: string;
  }>;
  addMappings: typesafe_actions1.PayloadActionCreator<"@iiif/ADD_MAPPINGS", {
    mapping: {
      [id: string]: string;
    };
  }>;
};
type MappingActions = ActionType<typeof mappingActions>;
//#endregion
//#region src/vault/actions/meta-actions.d.ts
declare const SET_META_VALUE = "@iiif/SET_META_VALUE";
declare const SET_META_VALUE_DYNAMIC = "@iiif/SET_META_VALUE_DYNAMIC";
declare const UNSET_META_VALUE = "@iiif/UNSET_META_VALUE";
declare const metaActions: {
  setMetaValue: typesafe_actions1.PayloadActionCreator<"@iiif/SET_META_VALUE", {
    id: string;
    meta: string;
    key: string;
    value: any;
  }>;
  setMetaValueDynamic: typesafe_actions1.PayloadActionCreator<"@iiif/SET_META_VALUE_DYNAMIC", {
    id: string;
    meta: string;
    key: string;
    updateValue: (oldValue: any) => any;
  }>;
  unsetMetaValue: typesafe_actions1.PayloadActionCreator<"@iiif/UNSET_META_VALUE", {
    id: string;
    meta: string;
    key: string;
  }>;
};
type MetaActions = ActionType<typeof metaActions>;
//#endregion
//#region src/vault/actions/request-actions.d.ts
declare const RESOURCE_ERROR = "RESOURCE_ERROR";
declare const RESOURCE_LOADING = "RESOURCE_LOADING";
declare const RESOURCE_READY = "RESOURCE_READY";
declare const REQUEST_RESOURCE = "@iiif/REQUEST_RESOURCE";
declare const REQUEST_ERROR = "@iiif/REQUEST_ERROR";
declare const REQUEST_MISMATCH = "@iiif/REQUEST_MISMATCH";
declare const REQUEST_COMPLETE = "@iiif/REQUEST_COMPLETE";
declare const REQUEST_OFFLINE_RESOURCE = "@iiif/REQUEST_OFFLINE_RESOURCE";
declare const requestResource: typesafe_actions1.PayloadActionCreator<"@iiif/REQUEST_RESOURCE", {
  id: string;
}>;
declare const requestError: typesafe_actions1.PayloadActionCreator<"@iiif/REQUEST_ERROR", {
  id: string;
  message: string;
}>;
declare const requestMismatch: typesafe_actions1.PayloadActionCreator<"@iiif/REQUEST_MISMATCH", {
  requestId: string;
  actualId: string;
}>;
declare const requestComplete: typesafe_actions1.PayloadActionCreator<"@iiif/REQUEST_COMPLETE", {
  id: string;
}>;
declare const requestOfflineResource: typesafe_actions1.PayloadActionCreator<"@iiif/REQUEST_OFFLINE_RESOURCE", {
  id: string;
  entity: unknown;
}>;
declare const requestActions: {
  requestResource: typesafe_actions1.PayloadActionCreator<"@iiif/REQUEST_RESOURCE", {
    id: string;
  }>;
  requestError: typesafe_actions1.PayloadActionCreator<"@iiif/REQUEST_ERROR", {
    id: string;
    message: string;
  }>;
  requestMismatch: typesafe_actions1.PayloadActionCreator<"@iiif/REQUEST_MISMATCH", {
    requestId: string;
    actualId: string;
  }>;
  requestComplete: typesafe_actions1.PayloadActionCreator<"@iiif/REQUEST_COMPLETE", {
    id: string;
  }>;
  requestOfflineResource: typesafe_actions1.PayloadActionCreator<"@iiif/REQUEST_OFFLINE_RESOURCE", {
    id: string;
    entity: unknown;
  }>;
};
type RequestActions = ActionType<typeof requestActions>;
//#endregion
//#region src/vault/types.d.ts
declare global {
  interface A {}
}
type MetaState = Record<string, Record<string, Record<string, any>>>;
type RequestState = {
  [id: string]: {
    loadingState: 'RESOURCE_ERROR' | 'RESOURCE_LOADING' | 'RESOURCE_READY';
    uriMismatch: boolean;
    requestUri: string;
    resourceUri: string;
    error?: string;
  };
};
type PaginationState = {
  pages: Array<{
    id: string;
    type: 'Collection';
    order: number;
    startIndex: number;
    pageLength: number;
  }>;
  page: number;
  totalItems?: number;
  totalPages?: number;
  currentLength: number;
  next: string | null;
  previous: string | null;
  currentPage: string | null;
  currentPageIndex: number | null;
  isFullyLoaded: boolean;
  isFetching: boolean;
  error?: any;
};
type NormalizedEntity = CollectionNormalized | ManifestNormalized | CanvasNormalized | AnnotationPageNormalized | AnnotationCollection | AnnotationNormalized | ContentResource | RangeNormalized | ServiceNormalized | ResourceProviderNormalized | Selector;
type RefToNormalized<Ref extends {
  type?: string;
}> = Ref['type'] extends 'Manifest' ? ManifestNormalized : Ref['type'] extends 'Canvas' ? CanvasNormalized : Ref['type'] extends 'AnnotationPage' ? AnnotationPageNormalized : Ref['type'] extends 'AnnotationCollection' ? AnnotationCollection : Ref['type'] extends 'Annotation' ? AnnotationNormalized : Ref['type'] extends 'Range' ? RangeNormalized : Ref['type'] extends 'Service' ? ServiceNormalized : Ref['type'] extends 'ContentResource' ? ContentResource : Ref['type'] extends 'ResourceProvider' ? ResourceProviderNormalized : Ref['type'] extends 'Collection' ? CollectionNormalized : any;
type RefToFull<Ref extends {
  type?: string;
}> = Ref['type'] extends 'Manifest' ? Manifest : Ref['type'] extends 'Canvas' ? Canvas : Ref['type'] extends 'AnnotationPage' ? AnnotationPage : Ref['type'] extends 'AnnotationCollection' ? AnnotationCollection : Ref['type'] extends 'Annotation' ? Annotation : Ref['type'] extends 'Range' ? Range : Ref['type'] extends 'Service' ? Service : Ref['type'] extends 'ContentResource' ? ContentResource : Ref['type'] extends 'ResourceProvider' ? ResourceProvider : Ref['type'] extends 'Collection' ? Collection : any;
type Entities = {
  Collection: {
    [id: string]: CollectionNormalized;
  };
  Manifest: {
    [id: string]: ManifestNormalized;
  };
  Canvas: {
    [id: string]: CanvasNormalized;
  };
  AnnotationPage: {
    [id: string]: AnnotationPageNormalized;
  };
  AnnotationCollection: {
    [id: string]: AnnotationCollection;
  };
  Annotation: {
    [id: string]: AnnotationNormalized;
  };
  ContentResource: {
    [id: string]: ContentResource;
  };
  Range: {
    [id: string]: RangeNormalized;
  };
  Service: {
    [id: string]: any;
  };
  Selector: {
    [id: string]: Selector;
  };
  Agent: {
    [id: string]: ResourceProviderNormalized;
  };
};
type EntityStore<Meta extends MetaState = MetaState> = {
  entities: Entities;
  mapping: Record<string, string>;
  requests: RequestState;
  meta: Meta;
};
type IIIFStore<Meta extends MetaState = MetaState> = {
  iiif: EntityStore<Meta>;
};
type AllActions = MappingActions | RequestActions | EntityActions | MetaActions;
type Reducer<TState, TAction> = (state: TState | undefined, action: TAction) => TState;
type ActionFromType<Type, Actions extends PayloadAction<any, any> = AllActions> = Actions extends {
  type: Type;
} ? Actions : never;
//#endregion
//#region src/vault/actions/batch-actions.d.ts
declare const BATCH_ACTIONS = "@iiif/BATCH";
declare const BATCH_IMPORT = "@iiif/BATCH_IMPORT";
declare const batchActions: typesafe_actions1.PayloadActionCreator<"@iiif/BATCH", {
  actions: AllActions[];
}>;
declare const batchImport: typesafe_actions1.PayloadActionCreator<"@iiif/BATCH_IMPORT", {
  state: EntityStore;
}>;
type BatchAction = ActionType<typeof batchActions | typeof batchImport>;
//#endregion
export { ADD_MAPPING, ADD_MAPPINGS, ADD_METADATA, ADD_REFERENCE, ActionFromType, AllActions, BATCH_ACTIONS, BATCH_IMPORT, BatchAction, Entities, EntityActions, EntityStore, IIIFStore, IMPORT_ENTITIES, MODIFY_ENTITY_FIELD, MOVE_ENTITIES, MOVE_ENTITY, MappingActions, MetaActions, MetaState, NormalizedEntity, PaginationState, REMOVE_METADATA, REMOVE_REFERENCE, REORDER_ENTITY_FIELD, REORDER_METADATA, REQUEST_COMPLETE, REQUEST_ERROR, REQUEST_MISMATCH, REQUEST_OFFLINE_RESOURCE, REQUEST_RESOURCE, RESOURCE_ERROR, RESOURCE_LOADING, RESOURCE_READY, Reducer, RefToFull, RefToNormalized, RequestActions, RequestState, SET_META_VALUE, SET_META_VALUE_DYNAMIC, UNSET_META_VALUE, UPDATE_METADATA, UPDATE_REFERENCE, addMapping, addMappings, addMetadata, addReference, batchActions, batchImport, entityActions, importEntities, mappingActions, metaActions, modifyEntityField, moveEntities, moveEntity, removeMetadata, removeReference, reorderEntityField, reorderMetadata, requestActions, requestComplete, requestError, requestMismatch, requestOfflineResource, requestResource, updateMetadata, updateReference };
//# sourceMappingURL=batch-actions-BdZYnFZU.d.ts.map