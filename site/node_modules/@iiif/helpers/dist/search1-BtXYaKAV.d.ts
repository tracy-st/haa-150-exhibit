import { Manifest, SearchService, SearchServiceAutocomplete, SearchServiceAutocompleteQueryParams, SearchServiceAutocompleteResponse, SearchServiceCommonHitSelectors, SearchServiceQueryParams, SearchServiceSearchResponse } from "@iiif/presentation-3";
import { ManifestNormalized } from "@iiif/presentation-3-normalized";
import * as zustand_vanilla0 from "zustand/vanilla";

//#region src/search1.d.ts
type Search1Service = SearchService & {
  service?: SearchServiceAutocomplete | SearchServiceAutocomplete[] | undefined;
};
interface Search1AutocompleteStore {
  hasAutocomplete: boolean;
  endpoint: string | undefined;
  results: SearchServiceAutocompleteResponse['terms'];
  lastQuery: SearchServiceAutocompleteQueryParams | null;
  loading: boolean;
  error: boolean;
  errorMessage: string;
  ignored: string[];
  setSearchService: (service: Search1Service) => void;
  clearSearch: () => void;
  search: (query: string, options?: {
    motivation?: string;
    date?: string;
    user?: string;
    headers?: HeadersInit;
  }) => void | Promise<void>;
}
declare function findSearch1Service(manifest: ManifestNormalized | Manifest): Search1Service | null;
declare function findAutocompleteService(service: Search1Service): SearchServiceAutocomplete | undefined;
declare const createSearch1AutocompleteStore: (service?: Search1Service | undefined, options?: {
  fetcher?: Fetcher<SearchServiceAutocompleteResponse>;
}) => zustand_vanilla0.StoreApi<Search1AutocompleteStore>;
type SingleSearchHit = {
  '@type': 'search:Hit';
  annotations: string[];
  selectors: Array<SearchServiceCommonHitSelectors>;
  match?: string;
  before?: string;
  after?: string;
};
interface Search1Store {
  endpoint: string | undefined;
  service: Search1Service | undefined;
  lastQuery: SearchServiceQueryParams;
  resources: SearchServiceSearchResponse['resources'];
  hits: SingleSearchHit[];
  loading: boolean;
  error: boolean;
  hasAutocomplete: boolean;
  hasSearch: boolean;
  errorMessage: string;
  hitIndex: number;
  highlight: {
    results: SearchServiceSearchResponse['resources'] | null;
    hit: SingleSearchHit | null;
  };
  search: (query: SearchServiceQueryParams, options?: {
    headers?: HeadersInit;
  }) => void | Promise<void>;
  setSearchService: (service: Search1Service) => void;
  clearSearch: () => void;
  highlightHit: (index: number) => void;
  nextHit: () => void;
  previousHit: () => void;
}
type FetcherReturn<T> = Promise<[T | null, error: string | null]>;
type Fetcher<T> = (query: string, options: {
  signal: AbortSignal;
  headers?: HeadersInit;
}) => FetcherReturn<T>;
declare const createSearch1Store: (service?: Search1Service | string, options?: {
  fetcher?: Fetcher<SearchServiceSearchResponse>;
}) => zustand_vanilla0.StoreApi<Search1Store>;
//#endregion
export { Search1AutocompleteStore, Search1Service, Search1Store, SingleSearchHit, createSearch1AutocompleteStore, createSearch1Store, findAutocompleteService, findSearch1Service };
//# sourceMappingURL=search1-BtXYaKAV.d.ts.map