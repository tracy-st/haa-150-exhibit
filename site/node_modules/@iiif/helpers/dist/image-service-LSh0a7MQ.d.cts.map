{"version":3,"file":"image-service-LSh0a7MQ.d.cts","names":["FixedSizeImage","FixedSizeImageService","VariableSizeImage","UnknownSizeImage","ImageCandidate","ImageCandidateRequest","ContentResource","ImageProfile","ImageSize","ImageTile","ImageService","ImageCandidate","ImageCandidateRequest","ImageServer","ImageServiceRequest","LoadedImageService","ImageServiceLoaderConfig","ImageServiceLoader","Partial","Promise","RequestInfo","RequestInit","Response","getImageServerFromId","ImageTile","sampledTilesToTiles","ImageCandidate","ImageCandidateRequest","pickBestFromCandidates","Array","FixedSizeImage","ImageCandidateRequest","isBestMatch","Required","ImageServiceLoader","Emitter","ImageService","LoadImageServiceDetail","ImageServiceStore","Record","Promise","ImageServiceStoreOptions","ImageServiceStoreEvents","Error","createImageServiceStore","zustand_vanilla1","StoreApi","imageServices","FixedSizeImage","FixedSizeImageService","getImageFromTileSource","ContentResource","ImageServiceLoader","ImageCandidate","getImageCandidates","ImageService","ImageCandidate","getImageCandidatesFromService","Service","FixedSizeImageService","getFixedSizesFromService","isImage3","ImageCandidate","ImageService","getCustomSizeFromService","ContentResource","ImageCandidate","getFixedSizeFromImage","ImageCandidate","inferImageSizeFromUrl","ImageSize","imageSizesMatch","ImageService","FixedSizeImageService","getSmallestScaleFactorAsSingleImage"],"sources":["../src/image-service/types.d.ts","../src/image-service/image-service-loader.d.ts","../src/image-service/get-image-server-from-id.d.ts","../src/image-service/sampled-tiles-to-tiles.d.ts","../src/image-service/pick-best-from-candidates.d.ts","../src/image-service/is-best-match.d.ts","../src/image-service/image-service-store.d.ts","../src/image-service/get-image-from-tile-source.d.ts","../src/image-service/get-image-candidates.d.ts","../src/image-service/get-image-candidates-from-service.d.ts","../src/image-service/get-fixed-sizes-from-service.d.ts","../src/image-service/is-image-3.d.ts","../src/image-service/get-custom-size-from-service.d.ts","../src/image-service/get-fixed-size-from-image.d.ts","../src/image-service/infer-size-from-url.d.ts","../src/image-service/image-sizes-match.d.ts","../src/image-service/get-smallest-scale-factor-as-single-image.d.ts"],"sourcesContent":["export type FixedSizeImage = {\n    id: string;\n    type: 'fixed';\n    width: number;\n    height: number;\n    unsafe?: boolean;\n};\nexport type FixedSizeImageService = {\n    id: string;\n    type: 'fixed-service';\n    width: number;\n    height: number;\n    level?: number | null;\n    version?: number;\n};\nexport type VariableSizeImage = {\n    id: string;\n    type: 'variable';\n    minWidth: number;\n    maxWidth: number;\n    minHeight: number;\n    maxHeight: number;\n    level?: number | null;\n    version?: number;\n};\nexport type UnknownSizeImage = {\n    id: string;\n    type: 'unknown';\n};\nexport type ImageCandidate = FixedSizeImage | VariableSizeImage | UnknownSizeImage | FixedSizeImageService;\nexport type ImageCandidateRequest = {\n    width?: number;\n    height?: number;\n    maxWidth?: number;\n    maxHeight?: number;\n    minWidth?: number;\n    minHeight?: number;\n    fallback?: boolean;\n    atAnyCost?: boolean;\n    unsafeImageService?: boolean;\n    returnAllOptions?: boolean;\n    allowUnsafe?: boolean;\n    preferFixedSize?: boolean;\n    explain?: boolean;\n};\n","import { ContentResource, ImageProfile, ImageSize, ImageTile, ImageService } from '@iiif/presentation-3';\nimport { ImageCandidate, ImageCandidateRequest } from './types';\nexport type ImageServer = {\n    root: string;\n    server: string | null;\n    sampledId: string;\n    verifications: number;\n    verified: boolean;\n    preLoaded: boolean;\n    malformed: boolean;\n    result: {\n        context: string | string[];\n        resourceServiceRatio: number;\n        sampledSizes: ImageSize[];\n        sizeRatios: number[];\n        sampledTiles: ImageTile[];\n        sampledProfile: ImageProfile | ImageProfile[];\n    };\n};\nexport type ImageServiceRequest = {\n    id: string;\n    width: number;\n    height: number;\n    source?: ImageService;\n};\ntype LoadedImageService = ImageService & {\n    real: boolean;\n};\nexport type ImageServiceLoaderConfig = {\n    verificationsRequired: number;\n    approximateServices: boolean;\n    enableFetching: boolean;\n    disableThrottling: boolean;\n};\nexport declare class ImageServiceLoader {\n    constructor(options?: Partial<ImageServiceLoaderConfig>);\n    config: ImageServiceLoaderConfig;\n    fetchingCount: number;\n    imageServices: {\n        [k: string]: LoadedImageService;\n    };\n    knownImageServers: {\n        [k: string]: ImageServer;\n    };\n    /**\n     * Preload image service\n     *\n     * This will preload an image service, fetching details and recording the image server that served\n     * the request. Based on this it will make a template for predicting other image sources from this\n     * server. You can optionally pass in other ids to verify that the prediction is accurate.\n     *\n     */\n    setConfig(config: Partial<ImageServiceLoaderConfig>): void;\n    /**\n     * Sample pre-fetched service\n     *\n     * If you have already fetched an image service, or are creating a viewer that only talks to a single\n     * image server and want to avoid calls, you can sample a service up-front. This will allow you to make\n     * completely synchronous calls to `loadServiceSync` and avoid any network calls for image services.\n     *\n     * @param service\n     * @param preLoaded Mark this as being pre-loaded (default: true)\n     */\n    sample(service: ImageService, imageServiceRequest?: ImageServiceRequest, preLoaded?: boolean): true | Promise<boolean>;\n    /**\n     * Preload an image server\n     *\n     * Similar to sample, but faster. This will bypass any checks and the logic contained in this implementation\n     * allowing you to correct mistakes this implementation might have made.\n     *\n     * @param server\n     * @param forceVerify\n     */\n    preLoad(server: ImageServer, forceVerify?: boolean): void;\n    /**\n     * Predict\n     *\n     * Predicts what the image service will be for a content resource.\n     *\n     * @param resource\n     * @param verify\n     * @param force\n     */\n    predict(resource: ImageServiceRequest, verify?: boolean, force?: boolean): ImageService | null;\n    getThumbnailFromResource(unknownResource: ContentResource | undefined, request: ImageCandidateRequest, dereference?: boolean, otherCandidates?: ImageCandidate[]): Promise<{\n        best: ImageCandidate | null;\n        fallback: ImageCandidate[];\n        log: string[];\n    }>;\n    getImageCandidates(unknownResource: ContentResource, dereference?: boolean): Promise<ImageCandidate[]>;\n    /**\n     * Verify approximation\n     *\n     * Given an image service, it will dereference that image service and compare the result with what\n     * would have been generated if we used internal guessing.\n     *\n     * @param resource\n     * @return Promise<boolean>\n     */\n    verify(resource: ImageServiceRequest): Promise<boolean>;\n    canLoadSync(service: ImageServiceRequest | ImageService | string): boolean;\n    /**\n     * Mark image service as malformed\n     *\n     * If you run into issues requesting images, you can mark an image service as malformed, and it will\n     * return you a new one. Future image services will also be requested fresh, and the system will have\n     * failed. Report a bug if this happens.\n     *\n     * @param resource\n     */\n    markAsMalformed(resource: ImageServiceRequest): Promise<ImageService>;\n    /**\n     * Fetch an image service (use loadService instead)\n     *\n     * @param serviceId\n     * @param forceFresh\n     */\n    fetchService(serviceId: string, forceFresh?: boolean): Promise<ImageService & {\n        real: boolean;\n    }>;\n    fetch(input: RequestInfo, init?: RequestInit): Promise<Response>;\n    /**\n     * Load an image service\n     *\n     * @param resource\n     * @param forceFresh\n     *\n     * @todo make this batched, so only the maximum required can be done at once, to allow\n     *       for the prediction engine to kick in.\n     */\n    loadService(resource: ImageServiceRequest, forceFresh?: boolean): Promise<ImageService>;\n    /**\n     * Load service synchronously\n     *\n     * If you know that the image service you are\n     * @param resource\n     */\n    loadServiceSync(resource: ImageServiceRequest): ImageService | null;\n}\nexport {};\n","/**\n * Get image server from ID.\n *\n * Normalises image service URLs to extract identity of the image server.\n *\n * @param url\n */\nexport declare function getImageServerFromId(url: string): string;\n","import { ImageTile } from '@iiif/presentation-3';\nexport declare function sampledTilesToTiles(width: number, height: number, sampledTiles: ImageTile[]): ImageTile[];\n","import { ImageCandidate, ImageCandidateRequest } from './types';\n/**\n * Pick best from candidates\n *\n * Takes in a list of candidate lists. The order should be in preference. This algorithm will try to pick\n * from the first list, with a best fit size. If not it will fallback to the other lists. It may come back\n * around to the first list and provide a fallback.\n *\n * @param inputRequest\n * @param candidates\n */\nexport declare function pickBestFromCandidates(inputRequest: ImageCandidateRequest, candidates: Array<() => ImageCandidate[]>): {\n    best: ImageCandidate | null;\n    fallback: ImageCandidate[];\n    log: string[];\n};\n","import { FixedSizeImage, ImageCandidateRequest } from './types';\nexport declare function isBestMatch(request: Required<ImageCandidateRequest>, current: FixedSizeImage | null, candidate: FixedSizeImage): boolean;\n","import { ImageServiceLoader } from './image-service-loader';\nimport { Emitter } from 'mitt';\nimport { ImageService } from '@iiif/presentation-3';\nexport type LoadImageServiceDetail = {\n    width: number;\n    height: number;\n    force?: boolean;\n};\nexport interface ImageServiceStore {\n    loaded: Record<string, {\n        status: 'loading' | 'done' | 'error';\n        service: ImageService | null;\n        error?: boolean;\n        errorMesage?: string;\n        real?: boolean;\n    }>;\n    loadServiceSync: (service: ImageService, detail?: LoadImageServiceDetail, backgroundRequest?: boolean) => ImageService | null;\n    loadService: (service: ImageService, detail?: LoadImageServiceDetail) => Promise<ImageService | null>;\n}\nexport interface ImageServiceStoreOptions {\n    loader?: ImageServiceLoader;\n    events?: Emitter<ImageServiceStoreEvents>;\n}\nexport type ImageServiceStoreEvents = {\n    'image-service.loaded': {\n        id: string;\n        service: ImageService | null;\n    };\n    'image-service.loading': {\n        id: string;\n    };\n    'image-service.error': {\n        id: string;\n        error: Error;\n    };\n};\nexport declare function createImageServiceStore(options?: ImageServiceStoreOptions): {\n    store: import(\"zustand/vanilla\").StoreApi<ImageServiceStore>;\n    events: Emitter<ImageServiceStoreEvents>;\n};\nexport declare const imageServices: {\n    store: import(\"zustand/vanilla\").StoreApi<ImageServiceStore>;\n    events: Emitter<ImageServiceStoreEvents>;\n};\n","import { FixedSizeImage, FixedSizeImageService } from './types';\nexport declare function getImageFromTileSource(image: FixedSizeImageService, targetWidth: number, targetHeight?: number): FixedSizeImage;\n","import { ContentResource } from '@iiif/presentation-3';\nimport { ImageServiceLoader } from './image-service-loader';\nimport { ImageCandidate } from './types';\n/**\n * Get image candidates\n *\n * Given an unknown resource, and optionally an image service loader, it will\n * try to get all of the possible options for images at a specific size.\n *\n * Note: if you are wanting to depend on external web resources, then you have\n * to either preload these, or prepare the image loader for predicting them.\n *\n * @param unknownResource\n * @param dereference\n * @param loader\n */\nexport declare function getImageCandidates(unknownResource: ContentResource, dereference: boolean | undefined, loader: ImageServiceLoader): ImageCandidate[];\n","import { ImageService } from '@iiif/presentation-3';\nimport { ImageCandidate } from './types';\nexport declare function getImageCandidatesFromService(service: ImageService[]): ImageCandidate[];\n","import { Service } from '@iiif/presentation-3';\nimport { FixedSizeImageService } from './types';\n/**\n * Get fixed sizes from service.\n *\n * Given an image service, this will extract the images from the sizes field of\n * the service. These are usually cached and great options for thumbnails.\n *\n * @param service\n */\nexport declare function getFixedSizesFromService(service: Service): FixedSizeImageService[];\n","export declare function isImage3(service: any): boolean;\n","import { ImageCandidate } from './types';\nimport { ImageService } from '@iiif/presentation-3';\n/**\n * Get custom size from service\n *\n * Given an image service – usually a full one, de-referenced or embedded – this\n * will return a list of available image sizes (min and max width and height) that\n * can be used to construct a IIIF query to get an image at any size within those\n * bounds. This is only supported by some image services. If unsupported, this will\n * return an empty list.\n *\n * @param service\n */\nexport declare function getCustomSizeFromService(service: ImageService): ImageCandidate[];\n","import { ContentResource } from '@iiif/presentation-3';\nimport { ImageCandidate } from './types';\n/**\n * Get fixed size from image\n *\n * Given a content resource, usually the body of a painting annotation, this will\n * return the URL to the image, and the height and width. The resource may also\n * be a string / direct link to the image. The height and width may be inferred from\n * a IIIF Image API endpoint, otherwise the return image candidate will have a type\n * of unknown.\n *\n * @param contentResource\n */\nexport declare function getFixedSizeFromImage(contentResource: ContentResource | string): ImageCandidate | null;\n","import { ImageCandidate } from './types';\n/**\n * Extracts the height and width from an image URL\n *\n * @param image\n */\nexport declare function inferImageSizeFromUrl(image: string): ImageCandidate;\n","import { ImageSize } from '@iiif/presentation-3';\nexport declare function imageSizesMatch(sizesA: ImageSize[], sizesB: ImageSize[]): boolean;\n","import { ImageService } from '@iiif/presentation-3';\nimport { FixedSizeImageService } from './types';\n/**\n * Returns a fixed size image using the tile using the largest available size,\n * or the smallest scale factor.\n *\n * @param service\n */\nexport declare function getSmallestScaleFactorAsSingleImage(service: ImageService): FixedSizeImageService | null;\n"],"mappings":"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"}