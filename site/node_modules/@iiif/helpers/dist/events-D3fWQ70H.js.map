{"version":3,"file":"events-D3fWQ70H.js","names":["props: any"],"sources":["../src/events.ts"],"sourcesContent":["import type { Reference } from '@iiif/presentation-3';\nimport { compatVault, CompatVault } from './compat';\n\nexport function createEventsHelper(vault: CompatVault = compatVault) {\n  return {\n    addEventListener<T>(\n      resource: Reference<any>,\n      event: string,\n      listener: (e: any, resource: T) => void,\n      scope?: string[]\n    ) {\n      if (!resource) {\n        return;\n      }\n\n      vault.setMetaValue<Array<{ callback: any; scope?: string[] }>>(\n        [resource.id, 'eventManager', event],\n        (registeredCallbacks) => {\n          const callbacks = registeredCallbacks || [];\n          for (const registered of callbacks) {\n            if (registered.callback === listener) {\n              // @todo check for scopes matching, very edge-case as scopes should be fixed.\n              return callbacks;\n            }\n          }\n          return [...callbacks, { callback: listener, scope }];\n        }\n      );\n\n      return listener;\n    },\n\n    removeEventListener<T>(resource: Reference<any>, event: string, listener: (e: any, resource: T) => void) {\n      if (!resource) {\n        return;\n      }\n      vault.setMetaValue<Array<{ callback: () => void; scope?: string[] }>>(\n        [resource.id, 'eventManager', event],\n        (registeredCallbacks) => {\n          return (registeredCallbacks || []).filter((registeredCallback) => registeredCallback.callback !== listener);\n        }\n      );\n    },\n\n    getListenersAsProps(resourceOrId: string | Reference<any>, scope?: string[]) {\n      const resource = typeof resourceOrId === 'string' ? { id: resourceOrId } : resourceOrId;\n      if (!resource || !resource.id) {\n        return {};\n      }\n      const hooks = vault.getResourceMeta(resource.id, 'eventManager');\n      const props: any = {};\n      if (hooks && resource) {\n        for (const hook of Object.keys(hooks)) {\n          props[hook] = (e: any) => {\n            const fullResource = vault.get<any>(resource);\n            for (const { callback, scope: _scope } of hooks[hook] || []) {\n              if (!_scope || (scope && _scope.indexOf(scope) !== -1)) {\n                callback(e, fullResource);\n              }\n            }\n          };\n        }\n      }\n      return props;\n    },\n  };\n}\n"],"mappings":"mDAGA,SAAgB,EAAmB,EAAqB,EAAa,CACnE,MAAO,CACL,iBACE,EACA,EACA,EACA,EACA,CACK,KAkBL,OAdA,EAAM,aACJ,CAAC,EAAS,GAAI,eAAgB,GAC7B,GAAwB,CACvB,IAAM,EAAY,GAAuB,GACzC,IAAK,IAAM,KAAc,EACvB,GAAI,EAAW,WAAa,EAE1B,OAAO,EAGX,MAAO,CAAC,GAAG,EAAW,CAAE,SAAU,EAAU,YAIzC,GAGT,oBAAuB,EAA0B,EAAe,EAAyC,CAClG,GAGL,EAAM,aACJ,CAAC,EAAS,GAAI,eAAgB,GAC7B,IACS,GAAuB,IAAI,OAAQ,GAAuB,EAAmB,WAAa,KAKxG,oBAAoB,EAAuC,EAAkB,CAC3E,IAAM,EAAW,OAAO,GAAiB,SAAW,CAAE,GAAI,GAAiB,EAC3E,GAAI,CAAC,GAAY,CAAC,EAAS,GACzB,MAAO,GAET,IAAM,EAAQ,EAAM,gBAAgB,EAAS,GAAI,gBAC3CA,EAAa,GACnB,GAAI,GAAS,EACX,IAAK,IAAM,KAAQ,OAAO,KAAK,GAC7B,EAAM,GAAS,GAAW,CACxB,IAAM,EAAe,EAAM,IAAS,GACpC,IAAK,GAAM,CAAE,WAAU,MAAO,KAAY,EAAM,IAAS,IACnD,CAAC,GAAW,GAAS,EAAO,QAAQ,KAAW,KACjD,EAAS,EAAG,IAMtB,OAAO"}