{"version":3,"file":"create-fetch-helper-Ty--oKG3.js","names":["actions: AllActions[]","fullEntity: any","cleanupSubscription: (() => void) | undefined"],"sources":["../src/vault/utility/action-list-from-resource.ts","../src/vault/utility/are-inputs-equal.ts","../src/vault/utility/resolve-if-exists.ts","../src/vault/utility/is-promise.ts","../src/vault/utility/create-fetch-helper.ts"],"sourcesContent":["import { normalize } from '@iiif/parser';\nimport { AllActions } from '../types';\nimport { addMapping, addMappings, importEntities, requestComplete, requestError, requestMismatch } from '../actions';\n\nexport const actionListFromResource = (id: string, response: unknown): AllActions[] => {\n  const { entities, resource, mapping } = normalize(response);\n  if (resource.id === undefined) {\n    return [requestError({ id, message: 'ID is not defined in resource.' })] as AllActions[];\n  }\n  // Always import and add mappings.\n  const actions: AllActions[] = [importEntities({ entities: entities as any }), addMappings({ mapping })];\n  // Check if we have a resource mismatch\n  if (resource.id !== id) {\n    actions.push(addMapping({ id, type: resource.type as string }));\n    actions.push(requestMismatch({ requestId: id, actualId: resource.id }));\n  }\n  // Finally mark as complete.\n  actions.push(requestComplete({ id }));\n  // and return.\n  return actions;\n};\n","// Source: https://github.com/alexreardon/memoize-one/blob/master/src/are-inputs-equal.ts\n// Number.isNaN as it is not supported in IE11 so conditionally using ponyfill\n// Using Number.isNaN where possible as it is ~10% faster\n\nconst safeIsNaN =\n  Number.isNaN ||\n  function ponyfill(value: unknown): boolean {\n    // // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#polyfill\n    // NaN is the only value in JavaScript which is not equal to itself.\n    return typeof value === 'number' && value !== value;\n  };\n\nfunction isEqual(first: unknown, second: unknown): boolean {\n  if (first === second) {\n    return true;\n  }\n\n  // Special case for NaN (NaN !== NaN)\n  if (safeIsNaN(first) && safeIsNaN(second)) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function areInputsEqual(\n  newInputs: readonly unknown[] | unknown,\n  lastInputs: readonly unknown[] | unknown\n): boolean {\n  if (!Array.isArray(newInputs) || !Array.isArray(lastInputs)) {\n    return newInputs === lastInputs;\n  }\n\n  // no checks needed if the inputs length has changed\n  if (newInputs.length !== lastInputs.length) {\n    return false;\n  }\n  // Using for loop for speed. It generally performs better than array.every\n  // https://github.com/alexreardon/memoize-one/pull/59\n  for (let i = 0; i < newInputs.length; i++) {\n    if (!isEqual(newInputs[i], lastInputs[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n","import { IIIFStore, NormalizedEntity } from '../types';\nimport { frameResource, HAS_PART, PART_OF } from '@iiif/parser';\n\nexport function resolveIfExists<T extends NormalizedEntity>(state: IIIFStore, url: string, parent?: any): T | undefined {\n  const request = state.iiif.requests[url];\n  // Return the resource.\n  const resourceType = state.iiif.mapping[url];\n  if (!resourceType || !(state.iiif.entities as any)[resourceType][request.resourceUri]) {\n    // Continue refetching resource, this is an invalid state.\n    return undefined;\n  }\n\n  const fullEntity: any = (state.iiif.entities as any)[resourceType][request.resourceUri] as T;\n\n  if (fullEntity && fullEntity[HAS_PART]) {\n    const framing = fullEntity[HAS_PART].find((t: any) => {\n      return parent ? t[PART_OF] === parent.id : t[PART_OF] === fullEntity.id;\n    });\n\n    return frameResource(fullEntity, framing);\n  }\n\n  return fullEntity;\n}\n","export function isPromise<T>(value: T | Promise<T>): value is Promise<T> {\n  return value && typeof (value as any).then === 'function';\n}\n","import { actionListFromResource } from './action-list-from-resource';\nimport { resolveIfExists } from './resolve-if-exists';\nimport { NormalizedEntity } from '../types';\nimport {\n  batchActions,\n  requestError,\n  requestResource,\n  RESOURCE_ERROR,\n  RESOURCE_LOADING,\n  RESOURCE_READY,\n} from '../actions';\nimport type { Vault } from '../vault';\nimport { isPromise } from './is-promise';\n\nexport function createFetchHelper<T>(\n  vault: Vault,\n  fetcher: (url: string, options?: T) => any | Promise<any>,\n  { waitTimeout = 30 }: { waitTimeout?: number } = {}\n) {\n  return (url: string, options?: T, mapper?: (r: any) => any): NormalizedEntity | undefined | Promise<NormalizedEntity | undefined> => {\n    const store = vault.getStore();\n    const state = store.getState();\n\n    const request = state.iiif.requests[url];\n    if (request) {\n      if (request.loadingState === RESOURCE_READY) {\n        // Return the resource.\n        const resolvedEntity = resolveIfExists(state, url);\n        if (resolvedEntity) {\n          return resolvedEntity;\n        }\n      }\n\n      switch (request.loadingState) {\n        case RESOURCE_ERROR:\n          // If it has errored, we will try again.\n          break;\n        case RESOURCE_LOADING: {\n          return (async () => {\n            // Subscribe and wait for resource to be done for X seconds, otherwise continue.\n            let cleanupSubscription: (() => void) | undefined;\n            let didContinue = false;\n            try {\n              const resolvedEntity = await Promise.race<NormalizedEntity | undefined>([\n                new Promise<NormalizedEntity | undefined>((resolve, reject) => {\n                  if (didContinue) {\n                    return;\n                  }\n                  cleanupSubscription = store.subscribe(() => {\n                    const latestState = store.getState();\n\n                    if (latestState.iiif.requests[url].loadingState === RESOURCE_ERROR) {\n                      reject();\n                      return;\n                    }\n\n                    if (latestState.iiif.requests[url].loadingState === RESOURCE_READY) {\n                      const maybeResolvedEntity = resolveIfExists(latestState, url);\n                      if (maybeResolvedEntity) {\n                        resolve(maybeResolvedEntity);\n                      } else {\n                        reject();\n                      }\n                    }\n                  });\n                }),\n                new Promise<undefined>((resolve, reject) =>\n                  setTimeout(\n                    () => {\n                      didContinue = true;\n                      reject();\n                    },\n                    waitTimeout * 60 * 1000\n                  )\n                ),\n              ]);\n              if (cleanupSubscription) {\n                cleanupSubscription();\n              }\n              if (resolvedEntity) {\n                return resolvedEntity;\n              }\n            } catch (e) {\n              if (cleanupSubscription) {\n                cleanupSubscription();\n              }\n            }\n          })();\n        }\n      }\n\n      // do nothing, and return?\n    }\n\n    vault.dispatch(requestResource({ id: url }));\n\n    const importResource = (resource: any) => {\n      if (!resource) {\n        return undefined;\n      }\n      if (!resource.id && !resource['@id']) {\n        if (resource['@type']) {\n          // assume it might be presentation 2.\n          resource['@id'] = url;\n          resource.id = url;\n        } else {\n          // assume presentation 3.\n          resource.id = url;\n        }\n      }\n      const toDispatch = actionListFromResource(url, resource);\n      vault.dispatch(batchActions({ actions: toDispatch }));\n      return resolveIfExists(store.getState(), url);\n    };\n\n    try {\n      const resourceOrPromise = fetcher(url, options);\n\n      if (isPromise(resourceOrPromise)) {\n        return (async () => {\n          try {\n            let data = await resourceOrPromise;\n            if (mapper) {\n              data = mapper(data);\n            }\n            return importResource(data);\n          } catch (err) {\n            vault.dispatch(requestError({ id: url, message: (err as any).toString() }));\n            // Rethrow.\n            throw err;\n          }\n        })();\n      }\n\n      // Assume it is a resource.\n      return importResource(mapper ? mapper(resourceOrPromise) : resourceOrPromise);\n    } catch (err) {\n      vault.dispatch(requestError({ id: url, message: (err as any).toString() }));\n      // Rethrow.\n      throw err;\n    }\n  };\n}\n"],"mappings":"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"}