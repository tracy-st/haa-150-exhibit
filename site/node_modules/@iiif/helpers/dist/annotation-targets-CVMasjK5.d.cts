import { ParsedSelector, SupportedTarget, SvgShapeType } from "./target-types-BiPzcttO.cjs";
import { ImageApiSelector, Selector, W3CAnnotationTarget } from "@iiif/presentation-3";

//#region src/annotation-targets/expand-target.d.ts
declare function expandTarget(target: W3CAnnotationTarget | W3CAnnotationTarget[], options?: {
  typeMap?: Record<string, string>;
  domParser?: DOMParser;
  svgPreprocessor?: (svg: string) => string;
  loadedStylesheets?: Record<string, string>;
  defaultType?: string;
  styleClass?: string;
}): SupportedTarget;
//#endregion
//#region src/annotation-targets/parse-selector.d.ts
declare function parseSelector(source: Selector | Selector[], {
  domParser,
  svgPreprocessor,
  iiifRenderingHints,
  loadedStylesheets
}?: {
  domParser?: DOMParser;
  svgPreprocessor?: (svg: string) => string;
  iiifRenderingHints?: ImageApiSelector;
  loadedStylesheets?: Record<string, string>;
}, {
  styleClass
}?: {
  styleClass?: string;
}): ParsedSelector;
type SelectorElement = {
  element: SVGElement;
  points: [number, number][];
  shapeType: SvgShapeType;
};
declare function isImageApiSelector(t: unknown): t is ImageApiSelector;
/**
 * Parse rotation "90", "180", "!90"
 */
declare function parseRotation(input: string): number;
//#endregion
export { SelectorElement, expandTarget, isImageApiSelector, parseRotation, parseSelector };
//# sourceMappingURL=annotation-targets-CVMasjK5.d.cts.map