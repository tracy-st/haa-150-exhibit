{"version":3,"file":"search1-DkZ6eFBO.d.cts","names":["SearchService","_SearchService","SearchServiceAutocomplete","SearchServiceAutocompleteQueryParams","SearchServiceAutocompleteResponse","SearchServiceSearchResponse","SearchServiceQueryParams","Manifest","SearchServiceCommonHitSelectors","ManifestNormalized","Search1Service","Search1AutocompleteStore","HeadersInit","Promise","findSearch1Service","findAutocompleteService","createSearch1AutocompleteStore","Fetcher","zustand_vanilla0","StoreApi","SingleSearchHit","Array","Search1Store","FetcherReturn","T","AbortSignal","createSearch1Store"],"sources":["../src/search1.d.ts"],"sourcesContent":["import { SearchService as _SearchService, SearchServiceAutocomplete, SearchServiceAutocompleteQueryParams, SearchServiceAutocompleteResponse, SearchServiceSearchResponse, SearchServiceQueryParams, Manifest, SearchServiceCommonHitSelectors } from '@iiif/presentation-3';\nimport { ManifestNormalized } from '@iiif/presentation-3-normalized';\nexport type Search1Service = _SearchService & {\n    service?: SearchServiceAutocomplete | SearchServiceAutocomplete[] | undefined;\n};\nexport interface Search1AutocompleteStore {\n    hasAutocomplete: boolean;\n    endpoint: string | undefined;\n    results: SearchServiceAutocompleteResponse['terms'];\n    lastQuery: SearchServiceAutocompleteQueryParams | null;\n    loading: boolean;\n    error: boolean;\n    errorMessage: string;\n    ignored: string[];\n    setSearchService: (service: Search1Service) => void;\n    clearSearch: () => void;\n    search: (query: string, options?: {\n        motivation?: string;\n        date?: string;\n        user?: string;\n        headers?: HeadersInit;\n    }) => void | Promise<void>;\n}\nexport declare function findSearch1Service(manifest: ManifestNormalized | Manifest): Search1Service | null;\nexport declare function findAutocompleteService(service: Search1Service): SearchServiceAutocomplete | undefined;\nexport declare const createSearch1AutocompleteStore: (service?: Search1Service | undefined, options?: {\n    fetcher?: Fetcher<SearchServiceAutocompleteResponse>;\n}) => import(\"zustand/vanilla\").StoreApi<Search1AutocompleteStore>;\nexport type SingleSearchHit = {\n    '@type': 'search:Hit';\n    annotations: string[];\n    selectors: Array<SearchServiceCommonHitSelectors>;\n    match?: string;\n    before?: string;\n    after?: string;\n};\nexport interface Search1Store {\n    endpoint: string | undefined;\n    service: Search1Service | undefined;\n    lastQuery: SearchServiceQueryParams;\n    resources: SearchServiceSearchResponse['resources'];\n    hits: SingleSearchHit[];\n    loading: boolean;\n    error: boolean;\n    hasAutocomplete: boolean;\n    hasSearch: boolean;\n    errorMessage: string;\n    hitIndex: number;\n    highlight: {\n        results: SearchServiceSearchResponse['resources'] | null;\n        hit: SingleSearchHit | null;\n    };\n    search: (query: SearchServiceQueryParams, options?: {\n        headers?: HeadersInit;\n    }) => void | Promise<void>;\n    setSearchService: (service: Search1Service) => void;\n    clearSearch: () => void;\n    highlightHit: (index: number) => void;\n    nextHit: () => void;\n    previousHit: () => void;\n}\ntype FetcherReturn<T> = Promise<[T | null, error: string | null]>;\ntype Fetcher<T> = (query: string, options: {\n    signal: AbortSignal;\n    headers?: HeadersInit;\n}) => FetcherReturn<T>;\nexport declare const createSearch1Store: (service?: Search1Service | string, options?: {\n    fetcher?: Fetcher<SearchServiceSearchResponse>;\n}) => import(\"zustand/vanilla\").StoreApi<Search1Store>;\nexport {};\n"],"mappings":"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"}