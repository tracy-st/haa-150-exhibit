type Point = [number, number] | [number, number, number, number, number, number];
interface Polygon {
    points: Point[];
    boundingBox: {
        x: number;
        y: number;
        width: number;
        height: number;
        rotation?: number;
    } | null;
    iedges: null | Point[];
    isBezier: null | boolean;
    bezierLines: [number, Point, Point][];
}

interface RenderState {
    isOpen: boolean;
    scale: number;
    polygon: Polygon;
    selectedPoints: Array<number>;
    transitionPoints: Array<Point> | null;
    lineBox: null | [Point, Point, Point, Point];
    line: null | [Point, Point];
    transitionOrigin: null | Point;
    transitionBoundingBox: null | {
        x: number;
        y: number;
        width: number;
        height: number;
        rotation?: number;
    };
    transitionRotate: boolean;
    selectionBox: null | {
        x: number;
        y: number;
        width: number;
        height: number;
    };
    pointer: null | Point;
    closestLinePoint: null | Point;
    closestLineDistance: number;
    closestLineIndex: number;
    transitionDirection: 'n' | 's' | 'e' | 'w' | 'ne' | 'nw' | 'se' | 'sw' | null;
    transitionBezierLine: null | [Point, Point];
    slowState: SlowState;
    transitionDraw: Point[];
}
interface SlowState {
    shapeId: undefined | string | null;
    noShape: boolean;
    actionIntentType: null | string;
    transitionIntentType: null | string;
    validIntentKeys: Record<string, string>;
    currentModifiers: Record<string, string>;
    transitioning: boolean;
    hasClosestLine: boolean;
    selectedPoints: number[];
    modifiers: Modifiers;
    showBoundingBox: boolean;
    pointerInsideShape: boolean;
    drawMode: boolean;
    closestPoint: null | number;
    transitionModifiers: Record<string, string> | null;
    selectedStamp: null | InputShape;
    bezierLines: [number, Point, Point][];
    lineMode: boolean;
    lineBoxMode: boolean;
}
type InputShape = {
    id?: string;
    points: Point[];
    open: boolean;
};
type Modifiers = {
    Shift: boolean;
    Alt: boolean;
    Meta: boolean;
    proximity: number;
};
type SetState = (state: SlowState | ((prev: SlowState) => SlowState)) => void;
type RenderFunc = (state: RenderState, slowState: SlowState, dt: number) => void;
interface TransitionIntent {
    type: string;
    label: string;
    modifiers?: Record<string, string>;
    isValid(pointers: Point[], state: RenderState, modifiers: Modifiers): boolean;
    start?(pointers: Point[], state: RenderState, modifiers: Modifiers): {
        isOpen?: boolean;
        points?: Point[];
        selectedPoints?: number[];
    } | void;
    transition(pointers: Point[], state: RenderState, modifiers: Modifiers): void;
    commit(pointers: Point[], state: RenderState, modifiers: Modifiers): {
        selectedPoints?: number[];
        points?: Point[];
        isOpen?: boolean;
    } | void;
}
interface ActionIntent {
    type: string;
    label: string;
    trigger: {
        type: 'click';
    } | {
        type: 'key';
        key: string;
    };
    modifiers?: Record<string, string>;
    isValid(pointers: Point[], state: RenderState, modifiers: Modifiers): boolean;
    commit(pointers: Point[], state: RenderState, modifiers: Modifiers): {
        selectedPoints?: number[];
        points?: Point[];
        isOpen?: boolean;
    } | void;
}

interface SvgHelpersOptions {
    proximityThreshold?: number;
    closestLinePointFill?: {
        selected: string;
        unselected: string;
    };
    closestLinePointStroke?: {
        selected: string;
        unselected: string;
    };
}
declare function createSvgHelpers(options?: SvgHelpersOptions): {
    updateTransitionBoundingBox: (el: SVGElement | undefined | null, state: RenderState, slowState: SlowState) => void;
    updateClosestLinePointTransform: (el: SVGElement | undefined | null, state: RenderState, slowState: SlowState) => void;
    updateBoundingBoxPolygon: (el: SVGElement | undefined | null, state: RenderState, slowState: SlowState) => void;
    updateBoundingBox: (el: SVGElement | undefined | null, state: RenderState, slowState: SlowState) => void;
    updateTransitionShape: (el: SVGElement | undefined | null, state: RenderState, slowState: SlowState) => void;
    updateClosestLinePoint: (el: SVGElement | undefined | null, state: RenderState, slowState: SlowState) => void;
    updateSelectBox: (el: SVGElement | undefined | null, state: RenderState, slowState: SlowState) => void;
    updatePointLine: (el: SVGElement | undefined | null, state: RenderState, slowState: SlowState) => void;
    updateDrawPreview: (el: SVGElement | undefined | null, state: RenderState, slowState: SlowState, tolerance?: number) => void;
    updateLineBox: (el: SVGElement | undefined | null, state: RenderState) => void;
};

interface CreateHelperInput {
    id?: string;
    open: boolean;
    points: Array<Point>;
}
declare function createHelper(input: CreateHelperInput | null, onSave: (input: CreateHelperInput) => void): {
    draw: {
        enable(): void;
        disable(): void;
        toggle(): void;
    };
    state: RenderState;
    modifiers: {
        reset(): void;
        getForType(type: string | null): Record<string, string>;
        set(modifier: string): void;
        unset(modifier: string): void;
    };
    stamps: {
        set(selectedStamp: InputShape | null): void;
        clear(): void;
        square(): void;
        triangle(): void;
        pentagon(): void;
        hexagon(): void;
    };
    key: {
        down(key: string): true | undefined;
        up(key: string): void;
    };
    setScale: (scale: number) => void;
    clock: {
        set: (renderFunc: RenderFunc) => void;
        start: (renderFunc?: RenderFunc, setStateFunc?: SetState) => void;
        stop: () => void;
        step: (deltaTime?: number) => void;
    };
    pointer: (pointers: Point[]) => void;
    blur: () => void;
    pointerDown: () => void;
    pointerUp: () => void;
    setShape: (shape: InputShape | null) => void;
    modes: {
        toggleLineBoxMode: () => void;
        toggleLineMode: () => void;
        enableLineMode(): void;
        disableLineMode(): void;
        enableLineBoxMode(): void;
        disableLineBoxMode(): void;
    };
    label: (type: string | null) => string;
};

export { type ActionIntent, type InputShape, type Modifiers, type RenderFunc, type RenderState, type SetState, type SlowState, type TransitionIntent, createHelper, createSvgHelpers };
