{"mappings":";;;;;;AAAA;;;;;;;;;;CAUC;;;;;AAsEM,SAAS,0CAAqE,KAA+B;IAClH,IAAI,iBAAC,gBAAgB,UAAc,GAAG;IACtC,IAAI,eAAe,CAAA,GAAA,6BAAqB,EAAE;IAC1C,IAAI,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,eAAO,EAAwB;IACvE,IAAI,eAAe,CAAA,GAAA,cAAM,EAAE;YACoE;QAA7F,OAAO,MAAM,YAAY,KAAK,YAAY,MAAM,YAAY,GAAI,kBAAkB,WAAW,CAAA,4BAAA,MAAM,kBAAkB,cAAxB,uCAAA,4BAA4B,OAAO,EAAE;IACpI,GAAG;QAAC,MAAM,YAAY;QAAE,MAAM,kBAAkB;QAAE;KAAc;IAChE,IAAI,QAAQ,CAAA,GAAA,cAAM,EAAE;QAClB,OAAO,MAAM,KAAK,KAAK,YAAY,MAAM,KAAK,GAAI,kBAAkB,WAAW,MAAM,WAAW,GAAG;IACrG,GAAG;QAAC,MAAM,KAAK;QAAE,MAAM,WAAW;QAAE;KAAc;IAClD,IAAI,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,yBAAiB,EAAsB,OAAO,cAAc,MAAM,QAAQ;IACtH,8FAA8F;IAC9F,IAAI,eAAe,kBAAkB,YAAY,MAAM,OAAO,CAAC,mBAAmB,eAAe,CAAC,EAAE,GAAG;IACvG,IAAI,WAAW,CAAC;QACd,IAAI,kBAAkB,UAAU;gBAI5B;gBAH+B;YAAjC,IAAI,MAAM,MAAM,OAAO,CAAC,SAAS,CAAA,UAAA,KAAK,CAAC,EAAE,cAAR,qBAAA,UAAY,OAAO;YACpD,mBAAmB;YACnB,IAAI,QAAQ,eACV,2BAAA,MAAM,iBAAiB,cAAvB,+CAAA,8BAAA,OAA0B;QAE9B,OAAO;YACL,IAAI,OAAc,EAAE;YACpB,IAAI,MAAM,OAAO,CAAC,QAChB,OAAO;iBACF,IAAI,SAAS,MAClB,OAAO;gBAAC;aAAM;YAGhB,mBAAmB;QACrB;IACF;IAEA,IAAI,YAAY,CAAA,GAAA,mBAAW,EAAE;QAC3B,GAAG,KAAK;uBACR;QACA,wBAAwB,kBAAkB;QAC1C,+BAA+B;QAC/B,cAAc,CAAA,GAAA,cAAM,EAAE,IAAM,mCAAa,eAAe;YAAC;SAAa;QACtE,mBAAmB,CAAC;YAClB,uCAAuC;YACvC,IAAI,SAAS,OACX;YAGF,IAAI,kBAAkB,UAAU;oBACpB;gBAAV,IAAI,MAAM,CAAA,0BAAA,KAAK,MAAM,GAAG,IAAI,GAAG,KAAK,cAA1B,qCAAA,0BAA8B;gBACxC,SAAS;gBACT,aAAa,KAAK;YACpB,OACE,SAAS;mBAAI;aAAK;YAGpB,gBAAgB,gBAAgB;QAClC;IACF;IAEA,IAAI,cAAc,UAAU,gBAAgB,CAAC,gBAAgB;IAC7D,IAAI,gBAAgB,CAAA,GAAA,cAAM,EAAE;QAC1B,OAAO;eAAI,UAAU,gBAAgB,CAAC,YAAY;SAAC,CAAC,GAAG,CAAC,CAAA,MAAO,UAAU,UAAU,CAAC,OAAO,CAAC,MAAM,MAAM,CAAC,CAAA,OAAQ,QAAQ;IAC3H,GAAG;QAAC,UAAU,gBAAgB,CAAC,YAAY;QAAE,UAAU,UAAU;KAAC;IAElE,IAAI,kBAAkB,CAAA,GAAA,6BAAqB,EAAE;QAC3C,GAAG,KAAK;QACR,OAAO,MAAM,OAAO,CAAC,iBAAiB,aAAa,MAAM,KAAK,IAAI,OAAO;IAC3E;IAEA,IAAI,CAAC,WAAW,WAAW,GAAG,CAAA,GAAA,eAAO,EAAE;IACvC,IAAI,CAAC,aAAa,GAAG,CAAA,GAAA,eAAO,EAAE;QAWd,iBAEM;IAXtB,OAAO;QACL,GAAG,eAAe;QAClB,GAAG,SAAS;QACZ,GAAG,YAAY;QACf,OAAO;QACP,cAAc,yBAAA,0BAAA,eAAgB;kBAC9B;qBACA;QACA,gBAAgB;QAChB,cAAc,CAAA,kBAAA,aAAa,CAAC,EAAE,cAAhB,6BAAA,kBAAoB;uBAClC;QACA,oBAAoB,CAAA,4BAAA,MAAM,kBAAkB,cAAxB,uCAAA,4BAA6B,MAAM,aAAa,KAAK,WAAW,eAAsB;uBAC1G;QACA,MAAK,gBAAsC,IAAI;YAC7C,yCAAyC;YACzC,IAAI,UAAU,UAAU,CAAC,IAAI,KAAK,GAAG;gBACnC,iBAAiB;gBACjB,aAAa,IAAI;YACnB;QACF;QACA,QAAO,gBAAsC,IAAI;YAC/C,IAAI,UAAU,UAAU,CAAC,IAAI,KAAK,GAAG;gBACnC,iBAAiB;gBACjB,aAAa,MAAM;YACrB;QACF;mBACA;oBACA;IACF;AACF;AAEA,SAAS,mCAAa,KAAqC;IACzD,IAAI,UAAU,WACZ,OAAO;IAET,IAAI,UAAU,MACZ,OAAO,EAAE;IAEX,OAAO,MAAM,OAAO,CAAC,SAAS,QAAQ;QAAC;KAAM;AAC/C","sources":["packages/@react-stately/select/src/useSelectState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionStateBase, FocusStrategy, Key, Node, Selection} from '@react-types/shared';\nimport {FormValidationState, useFormValidationState} from '@react-stately/form';\nimport {ListState, useListState} from '@react-stately/list';\nimport {OverlayTriggerState, useOverlayTriggerState} from '@react-stately/overlays';\nimport {SelectionMode, SelectProps, ValueType} from '@react-types/select';\nimport {useControlledState} from '@react-stately/utils';\nimport {useMemo, useState} from 'react';\n\nexport interface SelectStateOptions<T, M extends SelectionMode = 'single'> extends Omit<SelectProps<T, M>, 'children'>, CollectionStateBase<T> {}\n\nexport interface SelectState<T, M extends SelectionMode = 'single'> extends ListState<T>, OverlayTriggerState, FormValidationState {\n  /**\n   * The key for the first selected item.\n   * @deprecated\n   */\n  readonly selectedKey: Key | null,\n\n  /**\n   * The default selected key.\n   * @deprecated\n   */\n  readonly defaultSelectedKey: Key | null,\n\n  /**\n   * Sets the selected key.\n   * @deprecated\n   */\n  setSelectedKey(key: Key | null): void,\n\n  /** The current select value. */\n  readonly value: ValueType<M>,\n\n  /** The default select value. */\n  readonly defaultValue: ValueType<M>,\n\n  /** Sets the select value. */\n  setValue(value: Key | Key[] | null): void,\n\n  /**\n   * The value of the first selected item.\n   * @deprecated\n   */\n  readonly selectedItem: Node<T> | null,\n\n  /** The value of the selected items. */\n  readonly selectedItems: Node<T>[],\n\n  /** Whether the select is currently focused. */\n  readonly isFocused: boolean,\n\n  /** Sets whether the select is focused. */\n  setFocused(isFocused: boolean): void,\n\n  /** Controls which item will be auto focused when the menu opens. */\n  readonly focusStrategy: FocusStrategy | null,\n\n  /** Opens the menu. */\n  open(focusStrategy?: FocusStrategy | null): void,\n\n  /** Toggles the menu. */\n  toggle(focusStrategy?: FocusStrategy | null): void\n}\n\n/**\n * Provides state management for a select component. Handles building a collection\n * of items from props, handles the open state for the popup menu, and manages\n * multiple selection state.\n */\nexport function useSelectState<T extends object, M extends SelectionMode = 'single'>(props: SelectStateOptions<T, M>): SelectState<T, M>  {\n  let {selectionMode = 'single' as M} = props;\n  let triggerState = useOverlayTriggerState(props);\n  let [focusStrategy, setFocusStrategy] = useState<FocusStrategy | null>(null);\n  let defaultValue = useMemo(() => {\n    return props.defaultValue !== undefined ? props.defaultValue : (selectionMode === 'single' ? props.defaultSelectedKey ?? null : []) as ValueType<M>;\n  }, [props.defaultValue, props.defaultSelectedKey, selectionMode]);\n  let value = useMemo(() => {\n    return props.value !== undefined ? props.value : (selectionMode === 'single' ? props.selectedKey : undefined) as ValueType<M>;\n  }, [props.value, props.selectedKey, selectionMode]);\n  let [controlledValue, setControlledValue] = useControlledState<Key | Key[] | null>(value, defaultValue, props.onChange as any);\n  // Only display the first selected item if in single selection mode but the value is an array.\n  let displayValue = selectionMode === 'single' && Array.isArray(controlledValue) ? controlledValue[0] : controlledValue;\n  let setValue = (value: Key | Key[] | null) => {\n    if (selectionMode === 'single') {\n      let key = Array.isArray(value) ? value[0] ?? null : value;\n      setControlledValue(key);\n      if (key !== displayValue) {\n        props.onSelectionChange?.(key);\n      }\n    } else {\n      let keys: Key[] = [];\n      if (Array.isArray(value)) {\n        keys = value;\n      } else if (value != null) {\n        keys = [value];\n      }\n\n      setControlledValue(keys);\n    }\n  };\n\n  let listState = useListState({\n    ...props,\n    selectionMode,\n    disallowEmptySelection: selectionMode === 'single',\n    allowDuplicateSelectionEvents: true,\n    selectedKeys: useMemo(() => convertValue(displayValue), [displayValue]),\n    onSelectionChange: (keys: Selection) => {\n      // impossible, but TS doesn't know that\n      if (keys === 'all') {\n        return;\n      }\n\n      if (selectionMode === 'single') {\n        let key = keys.values().next().value ?? null;\n        setValue(key);\n        triggerState.close();\n      } else {\n        setValue([...keys]);\n      }\n\n      validationState.commitValidation();\n    }\n  });\n\n  let selectedKey = listState.selectionManager.firstSelectedKey;\n  let selectedItems = useMemo(() => {\n    return [...listState.selectionManager.selectedKeys].map(key => listState.collection.getItem(key)).filter(item => item != null);\n  }, [listState.selectionManager.selectedKeys, listState.collection]);\n\n  let validationState = useFormValidationState({\n    ...props,\n    value: Array.isArray(displayValue) && displayValue.length === 0 ? null : displayValue as any\n  });\n\n  let [isFocused, setFocused] = useState(false);\n  let [initialValue] = useState(displayValue);\n\n  return {\n    ...validationState,\n    ...listState,\n    ...triggerState,\n    value: displayValue as ValueType<M>,\n    defaultValue: defaultValue ?? initialValue as ValueType<M>,\n    setValue,\n    selectedKey,\n    setSelectedKey: setValue,\n    selectedItem: selectedItems[0] ?? null,\n    selectedItems,\n    defaultSelectedKey: props.defaultSelectedKey ?? (props.selectionMode === 'single' ? initialValue as Key : null),\n    focusStrategy,\n    open(focusStrategy: FocusStrategy | null = null) {\n      // Don't open if the collection is empty.\n      if (listState.collection.size !== 0) {\n        setFocusStrategy(focusStrategy);\n        triggerState.open();\n      }\n    },\n    toggle(focusStrategy: FocusStrategy | null = null) {\n      if (listState.collection.size !== 0) {\n        setFocusStrategy(focusStrategy);\n        triggerState.toggle();\n      }\n    },\n    isFocused,\n    setFocused\n  };\n}\n\nfunction convertValue(value: Key | Key[] | null | undefined) {\n  if (value === undefined) {\n    return undefined;\n  }\n  if (value === null) {\n    return [];\n  }\n  return Array.isArray(value) ? value : [value];\n}\n"],"names":[],"version":3,"file":"useSelectState.module.js.map"}